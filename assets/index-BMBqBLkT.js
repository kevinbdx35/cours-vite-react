import{j as e,h as n,M as t}from"./markdown-6vZpnw5e.js";import{r,T as s,C as o,B as i,b as a,c,S as l,d,e as u,L as p,f as m,g as h,P as g,D as f,h as v,i as y,j as x,N as b,F as k,k as C,l as j,A as T}from"./ui-4IsjniyA.js";import{a as S}from"./vendor-eVk5PToZ.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))n(e);new MutationObserver(e=>{for(const t of e)if("childList"===t.type)for(const e of t.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&n(e)}).observe(document,{childList:!0,subtree:!0})}function n(e){if(e.ep)return;e.ep=!0;const n=function(e){const n={};return e.integrity&&(n.integrity=e.integrity),e.referrerPolicy&&(n.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?n.credentials="include":"anonymous"===e.crossOrigin?n.credentials="omit":n.credentials="same-origin",n}(e);fetch(e.href,n)}}();var w,R={};var B=function(){if(w)return R;w=1;var e=S();return R.createRoot=e.createRoot,R.hydrateRoot=e.hydrateRoot,R}();const P=r.createContext(),D=[{id:"vite-basics",title:"Fondamentaux de Vite",description:"Apprenez les bases de Vite - un outil de build moderne pour le d√©veloppement web",icon:"‚ö°",duration:"30 min",lessons:[{id:"what-is-vite",title:"Qu'est-ce que Vite ?",description:"Introduction √† Vite et ses avantages",type:"theory",duration:"5 min",content:{theory:"\nVite est un outil de build moderne qui offre une exp√©rience de d√©veloppement plus rapide pour les projets web modernes.\n\n**Avantages cl√©s :**\n- ‚ö° **Ultra Rapide** : D√©marrage instantan√© du serveur et remplacement de module √† chaud\n- üîß **Configuration Simple** : Configuration minimale requise\n- üì¶ **Builds Optimis√©s** : Utilise Rollup pour les builds de production\n- üîå **√âcosyst√®me de Plugins** : Syst√®me de plugins riche\n\n**Pourquoi Vite ?**\nLes bundlers traditionnels comme Webpack doivent traiter toute votre application avant de la servir. Vite sert le code source via des modules ES natifs pendant le d√©veloppement, ce qui le rend incroyablement rapide.\n          ",codeExample:"\n// Approche traditionnelle (lente)\n// Bundler toute l'app ‚Üí Servir\n\n// Approche Vite (rapide)  \n// Servir les modules ES natifs ‚Üí Bundler seulement ce qui est n√©cessaire\n          "}},{id:"vite-vs-webpack",title:"Vite vs Bundlers Traditionnels",description:"Comparez Vite avec les bundlers traditionnels comme Webpack",type:"comparison",duration:"7 min",content:{theory:"\n**Comparaison de vitesse de d√©veloppement :**\n\n| Fonctionnalit√© | Webpack | Vite |\n|---------|---------|------|\n| D√©marrage √† froid | 30-60s | <1s |\n| Rechargement √† chaud | 1-3s | <100ms |\n| Taille du bundle | Grande | Optimis√©e |\n| Configuration | Complexe | Simple |\n\n**Quand utiliser Vite :**\n- Nouveaux projets\n- Navigateurs modernes\n- D√©veloppement rapide n√©cessaire\n\n**Quand rester avec Webpack :**\n- Support des navigateurs anciens\n- Exigences de build complexes\n- Projets existants importants\n          "}},{id:"project-structure",title:"Structure de Projet Vite",description:"Comprendre la structure typique d'un projet Vite",type:"practical",duration:"8 min",content:{theory:"\n**Structure Standard d'un Projet Vite :**\n\n```\nmon-app-vite/\n‚îú‚îÄ‚îÄ public/          # Ressources statiques\n‚îú‚îÄ‚îÄ src/            # Code source\n‚îÇ   ‚îú‚îÄ‚îÄ components/ # Composants React\n‚îÇ   ‚îú‚îÄ‚îÄ assets/     # Images, styles\n‚îÇ   ‚îî‚îÄ‚îÄ main.jsx    # Point d'entr√©e\n‚îú‚îÄ‚îÄ index.html      # Template HTML\n‚îú‚îÄ‚îÄ package.json    # D√©pendances\n‚îî‚îÄ‚îÄ vite.config.js  # Configuration Vite\n```\n\n**Fichiers Cl√©s :**\n- **index.html** : Le point d'entr√©e (contrairement √† Webpack)\n- **vite.config.js** : Fichier de configuration\n- **main.jsx** : Point d'entr√©e JavaScript\n          ",interactive:{type:"file-explorer",files:[{name:"index.html",type:"file",content:"<!DOCTYPE html>..."},{name:"src/",type:"folder",children:[{name:"main.jsx",type:"file"},{name:"App.jsx",type:"file"}]},{name:"public/",type:"folder"},{name:"vite.config.js",type:"file"}]}}},{id:"vite-commands",title:"Commandes Essentielles Vite",description:"Apprenez les commandes CLI Vite les plus importantes",type:"practical",duration:"10 min",content:{theory:"\n**Commandes Essentielles Vite :**\n\n```bash\n# Cr√©er un nouveau projet\nnpm create vite@latest mon-app\n\n# D√©marrer le serveur de d√©veloppement\nnpm run dev\n\n# Builder pour la production\nnpm run build\n\n# Pr√©visualiser le build de production\nnpm run preview\n```\n\n**D√©veloppement vs Production :**\n- **D√©veloppement** : Rebuild rapides, source maps, rechargement √† chaud\n- **Production** : Optimis√©, minifi√©, tree-shaking\n          ",interactive:{type:"terminal-simulator",commands:[{command:"npm run dev",output:"Local: http://localhost:5173/"},{command:"npm run build",output:"dist/ folder created"}]}}}]},{id:"react-fundamentals",title:"Fondamentaux de React",description:"Ma√Ætrisez les concepts fondamentaux du d√©veloppement React",icon:"‚öõÔ∏è",duration:"45 min",lessons:[{id:"what-is-react",title:"Qu'est-ce que React ?",description:"Introduction √† React et √† l'architecture bas√©e sur les composants",type:"theory",duration:"8 min",content:{theory:"\nReact est une biblioth√®que JavaScript pour construire des interfaces utilisateur, particuli√®rement des applications web.\n\n**Concepts Fondamentaux :**\n- üß© **Composants** : √âl√©ments d'interface r√©utilisables\n- üîÑ **DOM Virtuel** : Mises √† jour efficaces\n- üìä **√âtat (State)** : Donn√©es de composant qui peuvent changer\n- ‚ö° **Props** : Donn√©es transmises aux composants\n\n**Architecture Bas√©e sur les Composants :**\nDivisez votre interface en pi√®ces ind√©pendantes et r√©utilisables qui peuvent √™tre assembl√©es ensemble.\n          ",codeExample:'\n// Composant React Simple\nfunction Welcome(props) {\n  return <h1>Bonjour, {props.name} !</h1>;\n}\n\n// Utilisation du composant\n<Welcome name="Sarah" />\n          '}},{id:"jsx-syntax",title:"Syntaxe JSX",description:"Apprenez JSX - l'extension de syntaxe pour JavaScript",type:"practical",duration:"12 min",content:{theory:'\nJSX est une extension de syntaxe pour JavaScript qui vous permet d\'√©crire du code similaire √† HTML dans vos fichiers JavaScript.\n\n**R√®gles JSX :**\n- Doit retourner un seul √©l√©ment parent\n- Utilisez camelCase pour les attributs\n- Utilisez {} pour les expressions JavaScript\n- className au lieu de class\n\n**JSX vs HTML :**\n```jsx\n// JSX\n<div className="container">\n  <h1>{title}</h1>\n  <button onClick={handleClick}>Cliquez-moi</button>\n</div>\n\n// HTML\n<div class="container">\n  <h1>Titre Statique</h1>\n  <button onclick="handleClick()">Cliquez-moi</button>\n</div>\n```\n          ',interactive:{type:"code-editor",initialCode:'function MyComponent() {\n  const name = "World";\n  \n  return (\n    <div>\n      <h1>Hello {name}!</h1>\n    </div>\n  );\n}',solution:'function MyComponent() {\n  const name = "World";\n  const isLoggedIn = true;\n  \n  return (\n    <div className="welcome">\n      <h1>Hello {name}!</h1>\n      {isLoggedIn && <p>Welcome back!</p>}\n    </div>\n  );\n}'}}},{id:"components-props",title:"Components and Props",description:"Create reusable components and pass data with props",type:"practical",duration:"15 min",content:{theory:"\nComponents are the building blocks of React applications. Props (properties) are how you pass data to components.\n\n**Function Components:**\n```jsx\nfunction Greeting({ name, age }) {\n  return (\n    <div>\n      <h1>Hello {name}!</h1>\n      <p>You are {age} years old</p>\n    </div>\n  );\n}\n```\n\n**Props Best Practices:**\n- Props are read-only\n- Use destructuring for cleaner code\n- Provide default values when needed\n- Use PropTypes for type checking\n          ",interactive:{type:"component-builder",task:"Create a UserCard component that displays user information",template:'function UserCard({ name, email, avatar }) {\n  return (\n    <div className="user-card">\n      {/* Add your code here */}\n    </div>\n  );\n}'}}},{id:"state-events",title:"State and Event Handling",description:"Manage component state and handle user interactions",type:"practical",duration:"10 min",content:{theory:"\nState allows components to store and manage data that can change over time.\n\n**useState Hook:**\n```jsx\nimport { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  \n  const increment = () => {\n    setCount(count + 1);\n  };\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={increment}>+</button>\n    </div>\n  );\n}\n```\n\n**Event Handling:**\n- Use camelCase event names (onClick, onChange)\n- Pass function references, not calls\n- Use arrow functions for inline handlers\n          ",interactive:{type:"live-coding",challenge:"Build a simple todo app with add/remove functionality"}}}]},{id:"react-advanced",title:"Concepts Avanc√©s de React",description:"Approfondissez React avec les hooks, le contexte et l'optimisation des performances",icon:"üöÄ",duration:"60 min",lessons:[{id:"useeffect-hook",title:"useEffect Hook",description:"Manage side effects in functional components",type:"practical",duration:"20 min",content:{theory:"\nuseEffect lets you perform side effects in functional components (data fetching, subscriptions, manually changing the DOM).\n\n**Basic Syntax:**\n```jsx\nimport { useEffect, useState } from 'react';\n\nfunction DataFetcher() {\n  const [data, setData] = useState(null);\n  \n  useEffect(() => {\n    // Side effect code\n    fetchData().then(setData);\n    \n    // Cleanup function (optional)\n    return () => {\n      cleanup();\n    };\n  }, []); // Dependency array\n  \n  return <div>{data ? data.title : 'Loading...'}</div>;\n}\n```\n\n**Dependency Array:**\n- [] = Run once on mount\n- [value] = Run when value changes  \n- No array = Run on every render\n          ",interactive:{type:"effect-visualizer",examples:[{deps:"[]",description:"Mount only"},{deps:"[count]",description:"When count changes"},{deps:"none",description:"Every render"}]}}},{id:"custom-hooks",title:"Custom Hooks",description:"Create reusable stateful logic with custom hooks",type:"practical",duration:"20 min",content:{theory:"\nCustom hooks let you extract component logic into reusable functions.\n\n**Creating Custom Hooks:**\n```jsx\n// useCounter.js\nimport { useState } from 'react';\n\nfunction useCounter(initialValue = 0) {\n  const [count, setCount] = useState(initialValue);\n  \n  const increment = () => setCount(c => c + 1);\n  const decrement = () => setCount(c => c - 1);\n  const reset = () => setCount(initialValue);\n  \n  return { count, increment, decrement, reset };\n}\n\n// Using the custom hook\nfunction Counter() {\n  const { count, increment, decrement, reset } = useCounter(10);\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={increment}>+</button>\n      <button onClick={decrement}>-</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n}\n```\n\n**Hook Rules:**\n- Only call hooks at the top level\n- Only call hooks from React functions\n- Custom hook names must start with \"use\"\n          ",interactive:{type:"hook-builder",challenge:"Create a useLocalStorage hook"}}},{id:"context-api",title:"Context API",description:"Share data across components without prop drilling",type:"practical",duration:"20 min",content:{theory:"\nContext provides a way to pass data through the component tree without having to pass props down manually at every level.\n\n**Creating Context:**\n```jsx\nimport { createContext, useContext, useState } from 'react';\n\n// Create Context\nconst ThemeContext = createContext();\n\n// Provider Component\nfunction ThemeProvider({ children }) {\n  const [theme, setTheme] = useState('light');\n  \n  const value = {\n    theme,\n    toggleTheme: () => setTheme(t => t === 'light' ? 'dark' : 'light')\n  };\n  \n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\n// Custom Hook\nfunction useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within ThemeProvider');\n  }\n  return context;\n}\n\n// Using Context\nfunction Button() {\n  const { theme, toggleTheme } = useTheme();\n  \n  return (\n    <button \n      className={theme}\n      onClick={toggleTheme}\n    >\n      Toggle Theme\n    </button>\n  );\n}\n```\n\n**When to Use Context:**\n- Theme data (color, locale)\n- User authentication\n- App-wide settings\n- Avoid for frequently changing data\n          ",interactive:{type:"context-diagram",showPropDrilling:!0,showContext:!0}}},{id:"error-boundaries",title:"Error Boundaries",description:"Handle JavaScript errors in your React component tree",type:"advanced",duration:"15 min",content:{theory:"\nError boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI.\n\n**Creating an Error Boundary:**\n```jsx\nimport { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Log error to error reporting service\n    console.error('Error caught by boundary:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div style={{ padding: '2rem', textAlign: 'center' }}>\n          <h2>Oops! Something went wrong.</h2>\n          <p>We've been notified about this error.</p>\n          <button onClick={() => this.setState({ hasError: false })}>\n            Try again\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// Usage\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <Header />\n      <MainContent />\n      <Sidebar />\n    </ErrorBoundary>\n  );\n}\n```\n\n**What Error Boundaries Catch:**\n- Errors during rendering\n- Errors in lifecycle methods\n- Errors in constructors\n\n**What They Don't Catch:**\n- Event handlers\n- Asynchronous code (setTimeout, promises)\n- Errors during server-side rendering\n- Errors thrown in the error boundary itself\n          ",interactive:{type:"error-boundary-demo",component:"BuggyComponent",showFallback:!0}}},{id:"react-portals",title:"React Portals",description:"Render components outside the normal DOM hierarchy",type:"advanced",duration:"15 min",content:{theory:'\nPortals provide a way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.\n\n**Creating Portals:**\n```jsx\nimport { createPortal } from \'react-dom\';\n\nfunction Modal({ children, isOpen }) {\n  if (!isOpen) return null;\n\n  return createPortal(\n    <div className="modal-overlay">\n      <div className="modal-content">\n        {children}\n      </div>\n    </div>,\n    document.getElementById(\'modal-root\') // Target DOM node\n  );\n}\n\n// Usage\nfunction App() {\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <div className="app">\n      <button onClick={() => setShowModal(true)}>\n        Open Modal\n      </button>\n      \n      <Modal isOpen={showModal}>\n        <h2>Modal Content</h2>\n        <button onClick={() => setShowModal(false)}>\n          Close\n        </button>\n      </Modal>\n    </div>\n  );\n}\n```\n\n**Common Use Cases:**\n- Modals and dialogs\n- Tooltips and popovers\n- Notifications/toasts\n- Dropdown menus that need to escape parent containers\n\n**HTML Setup:**\n```html\n\x3c!-- index.html --\x3e\n<div id="root"></div>\n<div id="modal-root"></div>\n<div id="tooltip-root"></div>\n```\n\n**Benefits:**\n- Escape CSS overflow/z-index issues\n- Better semantic HTML structure\n- Event bubbling still works through React tree\n          ',interactive:{type:"portal-demo",components:["Modal","Tooltip","Toast"]}}},{id:"react-refs",title:"Refs and DOM Manipulation",description:"Access DOM elements and component instances directly",type:"advanced",duration:"20 min",content:{theory:"\nRefs provide a way to access DOM nodes or React elements created in the render method.\n\n**useRef Hook:**\n```jsx\nimport { useRef, useEffect } from 'react';\n\nfunction FocusInput() {\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    // Focus input on mount\n    inputRef.current.focus();\n  }, []);\n\n  const handleButtonClick = () => {\n    inputRef.current.focus();\n  };\n\n  return (\n    <div>\n      <input ref={inputRef} type=\"text\" />\n      <button onClick={handleButtonClick}>\n        Focus Input\n      </button>\n    </div>\n  );\n}\n```\n\n**Forwarding Refs:**\n```jsx\nimport { forwardRef, useRef } from 'react';\n\nconst CustomInput = forwardRef((props, ref) => {\n  return (\n    <input\n      ref={ref}\n      className=\"custom-input\"\n      {...props}\n    />\n  );\n});\n\nfunction App() {\n  const inputRef = useRef();\n\n  return (\n    <div>\n      <CustomInput ref={inputRef} placeholder=\"Custom input\" />\n      <button onClick={() => inputRef.current.focus()}>\n        Focus Custom Input\n      </button>\n    </div>\n  );\n}\n```\n\n**Common Use Cases:**\n- Managing focus, text selection, media playback\n- Triggering imperative animations\n- Integrating with third-party DOM libraries\n- Measuring DOM elements\n\n**Best Practices:**\n- Don't overuse refs - prefer declarative approach\n- Don't access refs during rendering\n- Use callback refs for dynamic lists\n- Clean up refs in useEffect cleanup\n          ",interactive:{type:"refs-playground",examples:["Focus Management","Scroll Position","Animation Trigger"]}}},{id:"react-memo-optimization",title:"Performance Optimization",description:"Optimize React apps with React.memo, useMemo, and useCallback",type:"advanced",duration:"25 min",content:{theory:"\nReact provides several tools for optimizing performance by preventing unnecessary re-renders.\n\n**React.memo:**\n```jsx\nimport { memo } from 'react';\n\nconst ExpensiveComponent = memo(function ExpensiveComponent({ data, onAction }) {\n  console.log('ExpensiveComponent rendered');\n  \n  return (\n    <div>\n      <h3>{data.title}</h3>\n      <p>{data.description}</p>\n      <button onClick={onAction}>Action</button>\n    </div>\n  );\n});\n\n// Custom comparison function\nconst OptimizedComponent = memo(function OptimizedComponent({ user }) {\n  return <div>{user.name}</div>;\n}, (prevProps, nextProps) => {\n  // Return true if props are equal (skip re-render)\n  return prevProps.user.id === nextProps.user.id;\n});\n```\n\n**useMemo Hook:**\n```jsx\nimport { useMemo } from 'react';\n\nfunction ExpensiveList({ items, filter }) {\n  const filteredItems = useMemo(() => {\n    console.log('Filtering items...');\n    return items.filter(item => \n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }, [items, filter]); // Only recalculate when items or filter change\n\n  const itemCount = useMemo(() => {\n    return filteredItems.length;\n  }, [filteredItems]);\n\n  return (\n    <div>\n      <p>Found {itemCount} items</p>\n      {filteredItems.map(item => (\n        <div key={item.id}>{item.name}</div>\n      ))}\n    </div>\n  );\n}\n```\n\n**useCallback Hook:**\n```jsx\nimport { useCallback, useState } from 'react';\n\nfunction TodoApp() {\n  const [todos, setTodos] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  // Without useCallback, this function is recreated on every render\n  const addTodo = useCallback((text) => {\n    setTodos(prev => [...prev, { id: Date.now(), text, completed: false }]);\n  }, []); // No dependencies, function never changes\n\n  const toggleTodo = useCallback((id) => {\n    setTodos(prev => prev.map(todo => \n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  }, []); // No dependencies needed since we use functional update\n\n  return (\n    <div>\n      <AddTodo onAdd={addTodo} />\n      <TodoList todos={todos} onToggle={toggleTodo} />\n    </div>\n  );\n}\n```\n\n**When to Use:**\n- **React.memo**: For components that receive the same props frequently\n- **useMemo**: For expensive calculations\n- **useCallback**: For functions passed to optimized child components\n\n**Performance Tips:**\n- Don't optimize prematurely - measure first\n- Profile with React DevTools\n- Consider code splitting for large components\n- Use React.Profiler for detailed analysis\n          ",interactive:{type:"performance-comparison",scenarios:["Without Optimization","With React.memo","With useMemo/useCallback"]}}}]},{id:"vite-react-integration",title:"Meilleures Pratiques Vite + React",description:"Optimisez votre flux de d√©veloppement Vite + React",icon:"‚ö°‚öõÔ∏è",duration:"30 min",lessons:[{id:"project-setup",title:"Optimal Project Setup",description:"Configure Vite and React for maximum productivity",type:"practical",duration:"15 min",content:{theory:"\n**Recommended Project Structure:**\n```\nsrc/\n‚îú‚îÄ‚îÄ components/     # Reusable UI components\n‚îÇ   ‚îú‚îÄ‚îÄ ui/        # Basic UI elements\n‚îÇ   ‚îî‚îÄ‚îÄ layout/    # Layout components\n‚îú‚îÄ‚îÄ pages/         # Page components\n‚îú‚îÄ‚îÄ hooks/         # Custom hooks\n‚îú‚îÄ‚îÄ services/      # API calls\n‚îú‚îÄ‚îÄ utils/         # Helper functions\n‚îú‚îÄ‚îÄ constants/     # App constants\n‚îî‚îÄ‚îÄ styles/        # Global styles\n```\n\n**Essential Vite Plugins:**\n```js\n// vite.config.js\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    port: 3000,\n    open: true\n  },\n  build: {\n    outDir: 'dist'\n  }\n})\n```\n          ",interactive:{type:"project-scaffolder",allowCustomization:!0}}},{id:"performance-optimization",title:"Performance Optimization",description:"Optimize your React app with Vite",type:"advanced",duration:"15 min",content:{theory:"\n**Code Splitting:**\n```jsx\nimport { lazy, Suspense } from 'react';\n\n// Lazy load components\nconst Dashboard = lazy(() => import('./Dashboard'));\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <Dashboard />\n    </Suspense>\n  );\n}\n```\n\n**Asset Optimization:**\n- Use `import.meta.glob()` for dynamic imports\n- Optimize images with Vite plugins\n- Use tree shaking for smaller bundles\n\n**Development Optimizations:**\n- Enable Fast Refresh\n- Use source maps\n- Configure proxy for API calls\n\n**Production Optimizations:**\n- Enable gzip compression\n- Use CDN for static assets\n- Implement proper caching strategies\n          ",interactive:{type:"performance-analyzer",metrics:["Bundle Size","Load Time","First Paint"]}}}]},{id:"react-router",title:"React Router",description:"Ma√Ætrisez le routage c√¥t√© client dans les applications React",icon:"üõ£Ô∏è",duration:"50 min",lessons:[{id:"router-basics",title:"Bases de React Router",description:"Apprenez les fondamentaux du routage c√¥t√© client",type:"practical",duration:"15 min",content:{theory:'\nReact Router permet la navigation entre diff√©rentes vues de composants dans une application React, permet de changer l\'URL du navigateur et maintient l\'interface utilisateur synchronis√©e avec l\'URL.\n\n**Installation :**\n```bash\nnpm install react-router-dom\n```\n\n**Configuration de base :**\n```jsx\nimport { BrowserRouter, Routes, Route } from \'react-router-dom\';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path="/" element={<Home />} />\n        <Route path="/about" element={<About />} />\n        <Route path="/contact" element={<Contact />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nfunction Home() {\n  return <h1>Page d\'Accueil</h1>;\n}\n\nfunction About() {\n  return <h1>Page √Ä Propos</h1>;\n}\n\nfunction Contact() {\n  return <h1>Page Contact</h1>;\n}\n```\n\n**Composants Principaux :**\n- **BrowserRouter** : Fournit le contexte de routage utilisant l\'API HTML5 history\n- **Routes** : Conteneur pour tous les composants Route\n- **Route** : D√©finit une route et son composant correspondant\n- **Link** : Composant de navigation (remplace les balises <a>)\n- **NavLink** : Lien avec style d\'√©tat actif\n\n**Navigation avec Link :**\n```jsx\nimport { Link } from \'react-router-dom\';\n\nfunction Navigation() {\n  return (\n    <nav>\n      <Link to="/">Accueil</Link>\n      <Link to="/about">√Ä Propos</Link>\n      <Link to="/contact">Contact</Link>\n    </nav>\n  );\n}\n```\n          ',interactive:{type:"router-setup",routes:["/","/about","/contact"],showNavigation:!0}}},{id:"dynamic-routes",title:"Routes Dynamiques et Param√®tres",description:"G√©rez les URLs dynamiques avec des param√®tres",type:"practical",duration:"20 min",content:{theory:"\nLes routes dynamiques vous permettent de capturer des valeurs depuis l'URL et de les utiliser dans vos composants.\n\n**Param√®tres d'URL :**\n```jsx\nimport { useParams } from 'react-router-dom';\n\n// D√©finition de route\n<Route path=\"/user/:id\" element={<UserProfile />} />\n\n// Composant\nfunction UserProfile() {\n  const { id } = useParams();\n  \n  return (\n    <div>\n      <h1>Profil Utilisateur</h1>\n      <p>ID Utilisateur : {id}</p>\n    </div>\n  );\n}\n```\n\n**Param√®tres Multiples :**\n```jsx\n// Route: /post/:category/:slug\n<Route path=\"/post/:category/:slug\" element={<BlogPost />} />\n\nfunction BlogPost() {\n  const { category, slug } = useParams();\n  \n  return (\n    <div>\n      <h1>Article de Blog</h1>\n      <p>Cat√©gorie : {category}</p>\n      <p>Slug : {slug}</p>\n    </div>\n  );\n}\n```\n\n**Param√®tres Optionnels :**\n```jsx\n// Param√®tre de page optionnel\n<Route path=\"/products/:category/:page?\" element={<Products />} />\n\nfunction Products() {\n  const { category, page = '1' } = useParams();\n  \n  return (\n    <div>\n      <h1>Produits dans {category}</h1>\n      <p>Page : {page}</p>\n    </div>\n  );\n}\n```\n\n**Query Parameters:**\n```jsx\nimport { useSearchParams } from 'react-router-dom';\n\nfunction SearchResults() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('q');\n  const filter = searchParams.get('filter');\n  \n  const updateFilter = (newFilter) => {\n    setSearchParams({ q: query, filter: newFilter });\n  };\n  \n  return (\n    <div>\n      <h1>Search Results for: {query}</h1>\n      <p>Filter: {filter}</p>\n      <button onClick={() => updateFilter('popular')}>\n        Popular Items\n      </button>\n    </div>\n  );\n}\n```\n          ",interactive:{type:"dynamic-routes-demo",routes:["/user/:id","/post/:category/:slug"],showParams:!0}}},{id:"nested-routes",title:"Routes Imbriqu√©es et Layouts",description:"Cr√©ez des layouts complexes avec du routage imbriqu√©",type:"advanced",duration:"15 min",content:{theory:'\nLes routes imbriqu√©es permettent de construire des interfaces complexes avec plusieurs niveaux de routage et des layouts partag√©s.\n\n**Structure de Routes Imbriqu√©es :**\n```jsx\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path="/" element={<Layout />}>\n          <Route index element={<Home />} />\n          <Route path="about" element={<About />} />\n          <Route path="products" element={<ProductsLayout />}>\n            <Route index element={<ProductsList />} />\n            <Route path=":id" element={<ProductDetail />} />\n            <Route path="categories" element={<Categories />} />\n          </Route>\n        </Route>\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\n// Composant Layout avec Outlet\nimport { Outlet } from \'react-router-dom\';\n\nfunction Layout() {\n  return (\n    <div className="app-layout">\n      <header>\n        <Navigation />\n      </header>\n      <main>\n        <Outlet /> {/* Child routes render here */}\n      </main>\n      <footer>\n        <p>&copy; 2024 My App</p>\n      </footer>\n    </div>\n  );\n}\n\nfunction ProductsLayout() {\n  return (\n    <div className="products-layout">\n      <aside>\n        <ProductsSidebar />\n      </aside>\n      <div className="products-content">\n        <Outlet /> {/* Nested product routes */}\n      </div>\n    </div>\n  );\n}\n```\n\n**Index Routes:**\nIndex routes render when the parent route path matches exactly:\n```jsx\n<Route path="/products" element={<ProductsLayout />}>\n  <Route index element={<ProductsList />} /> {/* /products */}\n  <Route path="new" element={<NewProduct />} /> {/* /products/new */}\n</Route>\n```\n\n**Route Context:**\nShare data between parent and child routes:\n```jsx\nimport { Outlet, useOutletContext } from \'react-router-dom\';\n\nfunction ParentRoute() {\n  const [user, setUser] = useState(null);\n  \n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <Outlet context={{ user, setUser }} />\n    </div>\n  );\n}\n\nfunction ChildRoute() {\n  const { user, setUser } = useOutletContext();\n  \n  return <div>Welcome, {user?.name}</div>;\n}\n```\n          ',interactive:{type:"nested-routes-builder",showOutlet:!0,showLayout:!0}}}]},{id:"forms-data-fetching",title:"Formulaires et R√©cup√©ration de Donn√©es",description:"G√©rez les saisies utilisateur et la communication API dans React",icon:"üìù",duration:"60 min",lessons:[{id:"controlled-components",title:"Composants Contr√¥l√©s et Formulaires",description:"Ma√Ætrisez la gestion de formulaires en React avec les composants contr√¥l√©s",type:"practical",duration:"20 min",content:{theory:'\nLes composants contr√¥l√©s sont des √©l√©ments de formulaire dont les valeurs sont contr√¥l√©es par l\'√©tat React.\n\n**Input Contr√¥l√© de Base :**\n```jsx\nimport { useState } from \'react\';\n\nfunction ContactForm() {\n  const [formData, setFormData] = useState({\n    name: \'\',\n    email: \'\',\n    message: \'\'\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\'Formulaire soumis :\', formData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type="text"\n        name="name"\n        value={formData.name}\n        onChange={handleChange}\n        placeholder="Your Name"\n        required\n      />\n      \n      <input\n        type="email"\n        name="email"\n        value={formData.email}\n        onChange={handleChange}\n        placeholder="Your Email"\n        required\n      />\n      \n      <textarea\n        name="message"\n        value={formData.message}\n        onChange={handleChange}\n        placeholder="Your Message"\n        rows={4}\n        required\n      />\n      \n      <button type="submit">Send Message</button>\n    </form>\n  );\n}\n```\n\n**Form Validation:**\n```jsx\nfunction SignupForm() {\n  const [formData, setFormData] = useState({\n    username: \'\',\n    email: \'\',\n    password: \'\',\n    confirmPassword: \'\'\n  });\n  \n  const [errors, setErrors] = useState({});\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData.username) {\n      newErrors.username = \'Username is required\';\n    } else if (formData.username.length < 3) {\n      newErrors.username = \'Username must be at least 3 characters\';\n    }\n    \n    if (!formData.email) {\n      newErrors.email = \'Email is required\';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = \'Email is invalid\';\n    }\n    \n    if (!formData.password) {\n      newErrors.password = \'Password is required\';\n    } else if (formData.password.length < 6) {\n      newErrors.password = \'Password must be at least 6 characters\';\n    }\n    \n    if (formData.password !== formData.confirmPassword) {\n      newErrors.confirmPassword = \'Passwords do not match\';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validateForm()) {\n      console.log(\'Form is valid, submitting...\');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <input\n          type="text"\n          name="username"\n          value={formData.username}\n          onChange={handleChange}\n          placeholder="Username"\n        />\n        {errors.username && <span className="error">{errors.username}</span>}\n      </div>\n      \n      <div>\n        <input\n          type="email"\n          name="email"\n          value={formData.email}\n          onChange={handleChange}\n          placeholder="Email"\n        />\n        {errors.email && <span className="error">{errors.email}</span>}\n      </div>\n      \n      <button type="submit">Sign Up</button>\n    </form>\n  );\n}\n```\n\n**Custom Form Hook:**\n```jsx\nfunction useForm(initialValues, validate) {\n  const [values, setValues] = useState(initialValues);\n  const [errors, setErrors] = useState({});\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setValues(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = (onSubmit) => (e) => {\n    e.preventDefault();\n    const validationErrors = validate(values);\n    setErrors(validationErrors);\n    \n    if (Object.keys(validationErrors).length === 0) {\n      onSubmit(values);\n    }\n  };\n\n  return { values, errors, handleChange, handleSubmit };\n}\n```\n          ',interactive:{type:"form-builder",fields:["text","email","textarea","select"],showValidation:!0}}},{id:"data-fetching",title:"R√©cup√©ration de Donn√©es avec useEffect",description:"R√©cup√©rez des donn√©es depuis des APIs et g√©rez les √©tats de chargement",type:"practical",duration:"25 min",content:{theory:"\nData fetching is a common side effect that requires careful handling of loading states, errors, and cleanup.\n\n**Basic Data Fetching:**\n```jsx\nimport { useState, useEffect } from 'react';\n\nfunction UserList() {\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch('/api/users');\n        \n        if (!response.ok) {\n          throw new Error('Failed to fetch users');\n        }\n        \n        const userData = await response.json();\n        setUsers(userData);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUsers();\n  }, []);\n\n  if (loading) return <div>Loading users...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div>\n      <h1>Users ({users.length})</h1>\n      {users.map(user => (\n        <div key={user.id} className=\"user-card\">\n          <h3>{user.name}</h3>\n          <p>{user.email}</p>\n        </div>\n      ))}\n    </div>\n  );\n}\n```\n\n**Custom Data Fetching Hook:**\n```jsx\nfunction useFetch(url) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const response = await fetch(url, {\n          signal: controller.signal\n        });\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        if (err.name !== 'AbortError') {\n          setError(err.message);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n\n    // Cleanup function\n    return () => {\n      controller.abort();\n    };\n  }, [url]);\n\n  return { data, loading, error };\n}\n\n// Usage\nfunction PostDetail({ postId }) {\n  const { data: post, loading, error } = useFetch(`/api/posts/${postId}`);\n  \n  if (loading) return <div>Loading post...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!post) return <div>Post not found</div>;\n\n  return (\n    <article>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n      <small>By {post.author} on {post.date}</small>\n    </article>\n  );\n}\n```\n\n**Handling Different HTTP Methods:**\n```jsx\nfunction useApi() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = async (url, options = {}) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch(url, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers\n        },\n        ...options\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const get = (url) => request(url);\n  const post = (url, data) => request(url, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n  const put = (url, data) => request(url, {\n    method: 'PUT',\n    body: JSON.stringify(data)\n  });\n  const del = (url) => request(url, { method: 'DELETE' });\n\n  return { loading, error, get, post, put, delete: del };\n}\n```\n\n**Error Boundaries for API Errors:**\n```jsx\nclass ApiErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true, error };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"api-error\">\n          <h2>Something went wrong with the API</h2>\n          <p>{this.state.error?.message}</p>\n          <button onClick={() => window.location.reload()}>\n            Retry\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n```\n          ",interactive:{type:"api-playground",endpoints:["/api/users","/api/posts","/api/comments"],showStates:["loading","success","error"]}}}]},{id:"state-management",title:"Gestion d'√âtat",description:"Mod√®les et librairies avanc√©s de gestion d'√©tat",icon:"üóÉÔ∏è",duration:"70 min",lessons:[{id:"global-state-patterns",title:"Mod√®les de Gestion d'√âtat Global",description:"Comprendre quand et comment g√©rer l'√©tat global",type:"theory",duration:"15 min",content:{theory:"\nLa gestion d'√©tat global devient n√©cessaire lorsque plusieurs composants doivent partager et synchroniser l'√©tat.\n\n**Quand Utiliser l'√âtat Global :**\n- Statut d'authentification utilisateur\n- Pr√©f√©rences de th√®me\n- Donn√©es du panier d'achat\n- Param√®tres √† l'√©chelle de l'application\n- Donn√©es dont plusieurs composants d√©connect√©s ont besoin\n\n**Arbre de D√©cision √âtat Local vs Global :**\n```\nL'√©tat doit-il √™tre partag√© entre les composants ?\n‚îú‚îÄ Non ‚Üí Utiliser l'√©tat local (useState)\n‚îî‚îÄ Oui\n   ‚îú‚îÄ Les composants sont-ils parent/enfant ? ‚Üí Utiliser prop drilling ou remonter l'√©tat\n   ‚îî‚îÄ Les composants sont-ils d√©connect√©s ? ‚Üí Utiliser la gestion d'√©tat global\n```\n\n**Options Int√©gr√©es de React :**\n1. **Context API** - Pour un √©tat global simple\n2. **useReducer + Context** - Pour une logique d'√©tat complexe\n3. **Librairies Externes** - Redux, Zustand, Jotai pour les besoins avanc√©s\n\n**Mod√®les de Gestion d'√âtat :**\n- **Architecture Flux** : Flux de donn√©es unidirectionnel\n- **Event Sourcing** : Stocker les changements d'√©tat comme √©v√©nements\n- **CQRS** : S√©parer les op√©rations de lecture et d'√©criture\n- **√âtat Atomique** : Diviser l'√©tat en petits atomes ind√©pendants\n          ",codeExample:"\n// Anti-pattern : Prop drilling\nfunction App() {\n  const [user, setUser] = useState(null);\n  return <Dashboard user={user} setUser={setUser} />;\n}\n\nfunction Dashboard({ user, setUser }) {\n  return <Sidebar user={user} setUser={setUser} />;\n}\n\nfunction Sidebar({ user, setUser }) {\n  return <UserProfile user={user} setUser={setUser} />;\n}\n\n// Better: Context API\nconst UserContext = createContext();\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  return (\n    <UserContext.Provider value={{ user, setUser }}>\n      <Dashboard />\n    </UserContext.Provider>\n  );\n}\n\nfunction UserProfile() {\n  const { user, setUser } = useContext(UserContext);\n  return <div>{user?.name}</div>;\n}\n          "}},{id:"zustand-basics",title:"Zustand pour la Gestion d'√âtat Simple",description:"Apprenez Zustand - une solution l√©g√®re de gestion d'√©tat",type:"practical",duration:"25 min",content:{theory:"\nZustand is a small, fast, and scalable state management solution that doesn't require providers or boilerplate.\n\n**Installation:**\n```bash\nnpm install zustand\n```\n\n**Basic Store:**\n```javascript\nimport { create } from 'zustand';\n\nconst useStore = create((set) => ({\n  count: 0,\n  increment: () => set((state) => ({ count: state.count + 1 })),\n  decrement: () => set((state) => ({ count: state.count - 1 })),\n  reset: () => set({ count: 0 }),\n}));\n\n// Using in components\nfunction Counter() {\n  const { count, increment, decrement, reset } = useStore();\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={increment}>+</button>\n      <button onClick={decrement}>-</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n}\n```\n\n**Async Actions:**\n```javascript\nconst useUserStore = create((set, get) => ({\n  users: [],\n  loading: false,\n  error: null,\n  \n  fetchUsers: async () => {\n    set({ loading: true, error: null });\n    try {\n      const response = await fetch('/api/users');\n      const users = await response.json();\n      set({ users, loading: false });\n    } catch (error) {\n      set({ error: error.message, loading: false });\n    }\n  },\n  \n  addUser: async (userData) => {\n    try {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(userData)\n      });\n      const newUser = await response.json();\n      set((state) => ({ \n        users: [...state.users, newUser] \n      }));\n    } catch (error) {\n      set({ error: error.message });\n    }\n  },\n  \n  removeUser: (userId) => set((state) => ({\n    users: state.users.filter(user => user.id !== userId)\n  })),\n}));\n```\n\n**Computed Values:**\n```javascript\nconst useShoppingCart = create((set, get) => ({\n  items: [],\n  \n  addItem: (product) => set((state) => ({\n    items: [...state.items, { ...product, quantity: 1 }]\n  })),\n  \n  removeItem: (productId) => set((state) => ({\n    items: state.items.filter(item => item.id !== productId)\n  })),\n  \n  // Computed values as getters\n  get totalItems() {\n    return get().items.reduce((sum, item) => sum + item.quantity, 0);\n  },\n  \n  get totalPrice() {\n    return get().items.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n  },\n}));\n\n// Usage with computed values\nfunction CartSummary() {\n  const totalItems = useShoppingCart((state) => state.totalItems);\n  const totalPrice = useShoppingCart((state) => state.totalPrice);\n  \n  return (\n    <div>\n      <p>Items: {totalItems}</p>\n      <p>Total: ${totalPrice.toFixed(2)}</p>\n    </div>\n  );\n}\n```\n\n**Selective Subscriptions:**\n```javascript\n// Only subscribe to specific parts of state\nfunction UserName() {\n  const userName = useUserStore((state) => state.user?.name);\n  return <span>{userName}</span>;\n}\n\nfunction UserEmail() {\n  const userEmail = useUserStore((state) => state.user?.email);\n  return <span>{userEmail}</span>;\n}\n```\n\n**Zustand Benefits:**\n- No providers needed\n- TypeScript friendly\n- Small bundle size (~1KB)\n- Works outside React\n- Simple API\n- Built-in devtools support\n          ",interactive:{type:"zustand-playground",stores:["counter","todo-list","user-management"],showDevtools:!0}}},{id:"redux-toolkit",title:"Redux Toolkit",description:"Redux moderne avec Redux Toolkit pour applications complexes",type:"advanced",duration:"30 min",content:{theory:"\nRedux Toolkit (RTK) is the official, recommended way to write Redux logic with less boilerplate.\n\n**Installation:**\n```bash\nnpm install @reduxjs/toolkit react-redux\n```\n\n**Store Setup:**\n```javascript\n// store.js\nimport { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from './counterSlice';\nimport userReducer from './userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    user: userReducer,\n  },\n  // Built-in middleware includes redux-thunk, serializable check, etc.\n});\n```\n\n**Creating Slices:**\n```javascript\n// counterSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0,\n    step: 1,\n  },\n  reducers: {\n    increment: (state) => {\n      // RTK uses Immer internally, so we can \"mutate\" state\n      state.value += state.step;\n    },\n    decrement: (state) => {\n      state.value -= state.step;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n    setStep: (state, action) => {\n      state.step = action.payload;\n    },\n    reset: (state) => {\n      state.value = 0;\n      state.step = 1;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount, setStep, reset } = counterSlice.actions;\nexport default counterSlice.reducer;\n```\n\n**Async Actions with createAsyncThunk:**\n```javascript\n// userSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Async thunk for fetching users\nexport const fetchUsers = createAsyncThunk(\n  'users/fetchUsers',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/api/users');\n      if (!response.ok) {\n        throw new Error('Failed to fetch users');\n      }\n      return await response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const addUser = createAsyncThunk(\n  'users/addUser',\n  async (userData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(userData),\n      });\n      return await response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nconst userSlice = createSlice({\n  name: 'users',\n  initialState: {\n    users: [],\n    loading: false,\n    error: null,\n  },\n  reducers: {\n    clearError: (state) => {\n      state.error = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      // Handle fetchUsers\n      .addCase(fetchUsers.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchUsers.fulfilled, (state, action) => {\n        state.loading = false;\n        state.users = action.payload;\n      })\n      .addCase(fetchUsers.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      // Handle addUser\n      .addCase(addUser.fulfilled, (state, action) => {\n        state.users.push(action.payload);\n      });\n  },\n});\n\nexport const { clearError } = userSlice.actions;\nexport default userSlice.reducer;\n```\n\n**Provider Setup:**\n```javascript\n// main.jsx\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n```\n\n**Using Redux in Components:**\n```javascript\nimport { useSelector, useDispatch } from 'react-redux';\nimport { increment, decrement, reset } from './counterSlice';\nimport { fetchUsers, addUser } from './userSlice';\n\nfunction Counter() {\n  const { value, step } = useSelector((state) => state.counter);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <p>Count: {value} (Step: {step})</p>\n      <button onClick={() => dispatch(increment())}>+</button>\n      <button onClick={() => dispatch(decrement())}>-</button>\n      <button onClick={() => dispatch(reset())}>Reset</button>\n    </div>\n  );\n}\n\nfunction UserList() {\n  const { users, loading, error } = useSelector((state) => state.users);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchUsers());\n  }, [dispatch]);\n\n  const handleAddUser = () => {\n    dispatch(addUser({ name: 'New User', email: 'user@example.com' }));\n  };\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div>\n      <button onClick={handleAddUser}>Add User</button>\n      {users.map(user => (\n        <div key={user.id}>{user.name}</div>\n      ))}\n    </div>\n  );\n}\n```\n\n**RTK Query for Data Fetching:**\n```javascript\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({ baseUrl: '/api' }),\n  tagTypes: ['User', 'Post'],\n  endpoints: (builder) => ({\n    getUsers: builder.query({\n      query: () => '/users',\n      providesTags: ['User'],\n    }),\n    addUser: builder.mutation({\n      query: (userData) => ({\n        url: '/users',\n        method: 'POST',\n        body: userData,\n      }),\n      invalidatesTags: ['User'],\n    }),\n  }),\n});\n\nexport const { useGetUsersQuery, useAddUserMutation } = apiSlice;\n```\n          ",interactive:{type:"redux-toolkit-demo",features:["slice-creation","async-thunks","rtk-query"],showDevtools:!0}}}]},{id:"react-testing",title:"Tests d'Applications React",description:"Apprenez √† √©crire des tests complets pour les composants et applications React",icon:"üß™",duration:"65 min",lessons:[{id:"testing-fundamentals",title:"Fondamentaux des Tests",description:"Comprendre les concepts de test et la pyramide de tests",type:"theory",duration:"15 min",content:{theory:"\nLes tests garantissent que vos applications React fonctionnent correctement et restent stables au fur et √† mesure qu'elles grandissent.\n\n**Types de Tests :**\n1. **Tests Unitaires** - Testent des composants ou fonctions individuels en isolation\n2. **Tests d'Int√©gration** - Testent comment plusieurs composants fonctionnent ensemble\n3. **Tests End-to-End (E2E)** - Testent des workflows complets d'utilisateur\n\n**La Pyramide des Tests :**\n```\n     /\\\n    /E2E\\     <- Peu, lents, co√ªteux\n   /______\\\n  /        \\\n /Int√©gration\\  <- Quelques-uns, vitesse moyenne\n/____________\\\n/            \\\n/  Unitaires  \\   <- Nombreux, rapides, peu co√ªteux\n/______________\\\n```\n\n**Que Tester :**\n- Rendu des composants\n- Interactions utilisateur\n- Changements d'√©tat\n- Gestion des props\n- Limites d'erreur\n- Int√©grations API\n\n**Que NE PAS Tester :**\n- D√©tails d'impl√©mentation\n- Librairies tierces\n- Styles (sauf si critique)\n- Algorithmes complexes (tester s√©par√©ment)\n\n**√âcosyst√®me d'Outils de Test :**\n- **Jest** - Framework de test et ex√©cuteur de tests\n- **React Testing Library** - Utilitaires de test de composants\n- **Vitest** - Ex√©cuteur de tests rapide natif Vite\n- **Cypress/Playwright** - Frameworks de tests E2E\n- **MSW** - Mocking d'API pour les tests\n\n**Principes de Test :**\n- √âcrire des tests qui se comportent comme les utilisateurs\n- Tester le comportement, pas l'impl√©mentation\n- Garder les tests simples et lisibles\n- Tester l'important, pas tout\n- √âchouer rapidement avec des messages d'erreur clairs\n          ",codeExample:"\n// Bon : Tester le comportement\ntest('affiche un message de bienvenue quand l\\'utilisateur se connecte', () => {\n  render(<LoginForm />);\n  \n  fireEvent.change(screen.getByLabelText(/username/i), {\n    target: { value: 'john' }\n  });\n  fireEvent.change(screen.getByLabelText(/password/i), {\n    target: { value: 'password123' }\n  });\n  fireEvent.click(screen.getByRole('button', { name: /log in/i }));\n  \n  expect(screen.getByText(/welcome john/i)).toBeInTheDocument();\n});\n\n// Mauvais : Tester l'impl√©mentation\ntest('d√©finit l\\'√©tat isLoggedIn √† true', () => {\n  const { result } = renderHook(() => useAuth());\n  \n  act(() => {\n    result.current.setIsLoggedIn(true); // Tester l'√©tat interne\n  });\n  \n  expect(result.current.isLoggedIn).toBe(true);\n});\n          "}},{id:"react-testing-library",title:"React Testing Library",description:"Ma√Ætrisez les tests de composants avec React Testing Library",type:"practical",duration:"25 min",content:{theory:"\nReact Testing Library provides utilities for testing React components in a way that resembles how users interact with your app.\n\n**Installation:**\n```bash\nnpm install --save-dev @testing-library/react @testing-library/jest-dom\n```\n\n**Basic Component Test:**\n```javascript\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\nimport Counter from '../Counter';\n\ntest('renders counter with initial value', () => {\n  render(<Counter initialValue={5} />);\n  \n  expect(screen.getByText('Count: 5')).toBeInTheDocument();\n});\n\ntest('increments counter when button clicked', async () => {\n  const user = userEvent.setup();\n  render(<Counter initialValue={0} />);\n  \n  const incrementButton = screen.getByRole('button', { name: /increment/i });\n  await user.click(incrementButton);\n  \n  expect(screen.getByText('Count: 1')).toBeInTheDocument();\n});\n```\n\n**Query Methods:**\n```javascript\n// getBy* - Throws error if not found (use for elements that should exist)\nconst button = screen.getByRole('button', { name: /submit/i });\nconst input = screen.getByLabelText(/username/i);\nconst heading = screen.getByText(/welcome/i);\n\n// queryBy* - Returns null if not found (use for elements that shouldn't exist)\nconst error = screen.queryByText(/error/i);\nexpect(error).not.toBeInTheDocument();\n\n// findBy* - Async, waits for element (use for elements that appear later)\nconst message = await screen.findByText(/success/i);\n\n// getAllBy* - Returns array of elements\nconst listItems = screen.getAllByRole('listitem');\nexpect(listItems).toHaveLength(3);\n```\n\n**Testing Forms:**\n```javascript\ntest('submits form with correct data', async () => {\n  const mockSubmit = jest.fn();\n  const user = userEvent.setup();\n  \n  render(<ContactForm onSubmit={mockSubmit} />);\n  \n  await user.type(screen.getByLabelText(/name/i), 'John Doe');\n  await user.type(screen.getByLabelText(/email/i), 'john@example.com');\n  await user.type(screen.getByLabelText(/message/i), 'Hello world');\n  \n  await user.click(screen.getByRole('button', { name: /send/i }));\n  \n  expect(mockSubmit).toHaveBeenCalledWith({\n    name: 'John Doe',\n    email: 'john@example.com',\n    message: 'Hello world'\n  });\n});\n```\n\n**Testing with Context:**\n```javascript\nimport { ThemeProvider } from '../contexts/ThemeContext';\n\nconst renderWithTheme = (ui, theme = 'light') => {\n  return render(\n    <ThemeProvider initialTheme={theme}>\n      {ui}\n    </ThemeProvider>\n  );\n};\n\ntest('renders with dark theme', () => {\n  renderWithTheme(<Button>Click me</Button>, 'dark');\n  \n  const button = screen.getByRole('button');\n  expect(button).toHaveClass('dark-theme');\n});\n```\n\n**Testing Custom Hooks:**\n```javascript\nimport { renderHook, act } from '@testing-library/react';\nimport { useCounter } from '../hooks/useCounter';\n\ntest('useCounter increments value', () => {\n  const { result } = renderHook(() => useCounter(0));\n  \n  expect(result.current.count).toBe(0);\n  \n  act(() => {\n    result.current.increment();\n  });\n  \n  expect(result.current.count).toBe(1);\n});\n\ntest('useCounter with custom step', () => {\n  const { result } = renderHook(() => useCounter(0, 5));\n  \n  act(() => {\n    result.current.increment();\n  });\n  \n  expect(result.current.count).toBe(5);\n});\n```\n\n**Mocking API Calls:**\n```javascript\nimport { rest } from 'msw';\nimport { setupServer } from 'msw/node';\n\nconst server = setupServer(\n  rest.get('/api/users', (req, res, ctx) => {\n    return res(\n      ctx.json([\n        { id: 1, name: 'John' },\n        { id: 2, name: 'Jane' }\n      ])\n    );\n  })\n);\n\nbeforeAll(() => server.listen());\nafterEach(() => server.resetHandlers());\nafterAll(() => server.close());\n\ntest('displays users from API', async () => {\n  render(<UserList />);\n  \n  expect(screen.getByText(/loading/i)).toBeInTheDocument();\n  \n  const users = await screen.findAllByTestId('user-item');\n  expect(users).toHaveLength(2);\n  expect(screen.getByText('John')).toBeInTheDocument();\n  expect(screen.getByText('Jane')).toBeInTheDocument();\n});\n```\n\n**Common Matchers:**\n```javascript\n// DOM assertions\nexpect(element).toBeInTheDocument();\nexpect(element).toHaveTextContent('Hello');\nexpect(element).toHaveClass('active');\nexpect(element).toBeDisabled();\nexpect(element).toHaveValue('input value');\n\n// Array/Object assertions\nexpect(array).toHaveLength(3);\nexpect(mockFn).toHaveBeenCalledWith(expectedArgs);\nexpect(mockFn).toHaveBeenCalledTimes(1);\n```\n          ",interactive:{type:"testing-playground",components:["Counter","TodoList","UserProfile"],showQueries:!0,showMatchers:!0}}},{id:"advanced-testing",title:"Mod√®les de Tests Avanc√©s",description:"Apprenez des techniques de test avanc√©es pour des sc√©narios complexes",type:"advanced",duration:"25 min",content:{theory:"\nAdvanced testing patterns help you handle complex scenarios like async operations, error states, and performance testing.\n\n**Testing Error Boundaries:**\n```javascript\nconst ThrowError = ({ shouldThrow }) => {\n  if (shouldThrow) {\n    throw new Error('Test error');\n  }\n  return <div>No error</div>;\n};\n\ntest('error boundary catches errors', () => {\n  const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n  \n  render(\n    <ErrorBoundary>\n      <ThrowError shouldThrow={true} />\n    </ErrorBoundary>\n  );\n  \n  expect(screen.getByText(/something went wrong/i)).toBeInTheDocument();\n  expect(screen.queryByText('No error')).not.toBeInTheDocument();\n  \n  consoleSpy.mockRestore();\n});\n```\n\n**Testing Async Components:**\n```javascript\ntest('shows loading state then data', async () => {\n  const mockFetch = jest.spyOn(global, 'fetch').mockResolvedValue({\n    ok: true,\n    json: async () => ({ users: [{ id: 1, name: 'John' }] })\n  });\n  \n  render(<AsyncUserList />);\n  \n  // Check loading state\n  expect(screen.getByText(/loading/i)).toBeInTheDocument();\n  \n  // Wait for data to load\n  await waitFor(() => {\n    expect(screen.queryByText(/loading/i)).not.toBeInTheDocument();\n  });\n  \n  expect(screen.getByText('John')).toBeInTheDocument();\n  \n  mockFetch.mockRestore();\n});\n\ntest('handles API errors gracefully', async () => {\n  const mockFetch = jest.spyOn(global, 'fetch').mockRejectedValue(\n    new Error('API Error')\n  );\n  \n  render(<AsyncUserList />);\n  \n  const errorMessage = await screen.findByText(/failed to load users/i);\n  expect(errorMessage).toBeInTheDocument();\n  \n  mockFetch.mockRestore();\n});\n```\n\n**Testing React Router:**\n```javascript\nimport { BrowserRouter } from 'react-router-dom';\nimport { createMemoryHistory } from 'history';\nimport { Router } from 'react-router-dom';\n\nconst renderWithRouter = (ui, { initialEntries = ['/'] } = {}) => {\n  const history = createMemoryHistory({ initialEntries });\n  \n  return {\n    ...render(\n      <Router history={history}>\n        {ui}\n      </Router>\n    ),\n    history,\n  };\n};\n\ntest('navigates to user profile', async () => {\n  const user = userEvent.setup();\n  const { history } = renderWithRouter(<App />);\n  \n  const profileLink = screen.getByRole('link', { name: /profile/i });\n  await user.click(profileLink);\n  \n  expect(history.location.pathname).toBe('/profile');\n  expect(screen.getByText(/user profile/i)).toBeInTheDocument();\n});\n```\n\n**Performance Testing:**\n```javascript\nimport { Profiler } from 'react';\n\ntest('component renders efficiently', () => {\n  const onRender = jest.fn();\n  \n  render(\n    <Profiler id=\"ExpensiveComponent\" onRender={onRender}>\n      <ExpensiveComponent data={largeDataSet} />\n    </Profiler>\n  );\n  \n  expect(onRender).toHaveBeenCalledTimes(1);\n  \n  const [id, phase, actualDuration] = onRender.mock.calls[0];\n  expect(actualDuration).toBeLessThan(100); // ms\n});\n```\n\n**Snapshot Testing:**\n```javascript\ntest('matches snapshot', () => {\n  const { container } = render(<UserCard user={mockUser} />);\n  expect(container.firstChild).toMatchSnapshot();\n});\n\n// For dynamic content, use property matchers\ntest('matches snapshot with dynamic content', () => {\n  const component = render(<Article article={mockArticle} />);\n  expect(component).toMatchSnapshot({\n    createdAt: expect.any(String),\n    id: expect.any(Number)\n  });\n});\n```\n\n**Visual Regression Testing:**\n```javascript\n// With @storybook/test-runner or similar tools\ntest('visual regression test', async () => {\n  await page.goto('http://localhost:6006/iframe.html?id=button--primary');\n  \n  const screenshot = await page.screenshot();\n  expect(screenshot).toMatchImageSnapshot({\n    threshold: 0.2,\n    thresholdType: 'percent'\n  });\n});\n```\n\n**Testing with React Query:**\n```javascript\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst createTestQueryClient = () => new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst renderWithQueryClient = (ui) => {\n  const testQueryClient = createTestQueryClient();\n  return render(\n    <QueryClientProvider client={testQueryClient}>\n      {ui}\n    </QueryClientProvider>\n  );\n};\n\ntest('fetches and displays data with React Query', async () => {\n  const mockFetch = jest.spyOn(global, 'fetch').mockResolvedValue({\n    ok: true,\n    json: async () => ({ data: 'test data' })\n  });\n  \n  renderWithQueryClient(<DataComponent />);\n  \n  expect(screen.getByText(/loading/i)).toBeInTheDocument();\n  \n  const data = await screen.findByText('test data');\n  expect(data).toBeInTheDocument();\n  \n  mockFetch.mockRestore();\n});\n```\n\n**Accessibility Testing:**\n```javascript\nimport { axe, toHaveNoViolations } from 'jest-axe';\n\nexpect.extend(toHaveNoViolations);\n\ntest('should not have accessibility violations', async () => {\n  const { container } = render(<LoginForm />);\n  const results = await axe(container);\n  expect(results).toHaveNoViolations();\n});\n```\n          ",interactive:{type:"advanced-testing-lab",scenarios:["Error Boundaries","Async Components","Router Testing","Performance"],showMocking:!0}}}]},{id:"mini-project",title:"Mini Projet : Gestionnaire de T√¢ches",description:"Construisez une application compl√®te de gestion de t√¢ches √©tape par √©tape",icon:"üöÄ",duration:"120 min",lessons:[{id:"project-setup",title:"Configuration du Projet",description:"Initialisation et structure du projet",type:"project",duration:"20 min",content:{theory:"\nNous allons construire un **Gestionnaire de T√¢ches** complet qui int√®gre tous les concepts appris dans ce cours.\n\n**Fonctionnalit√©s de l'Application :**\n- ‚úÖ Ajouter, modifier et supprimer des t√¢ches\n- üè∑Ô∏è Organiser par cat√©gories et priorit√©s\n- üîç Recherche et filtrage avanc√©s\n- üìä Statistiques et progression\n- üé® Th√®me sombre/clair\n- üíæ Persistance des donn√©es (localStorage)\n- üì± Design responsive\n\n**Stack Technologique :**\n- **Vite + React** - Base du projet\n- **React Router** - Navigation entre les pages\n- **Zustand** - Gestion d'√©tat global\n- **Framer Motion** - Animations\n- **React Hook Form** - Gestion des formulaires\n- **React Testing Library** - Tests\n\n**Structure du Projet :**\n```\nsrc/\n‚îú‚îÄ‚îÄ components/\n‚îÇ   ‚îú‚îÄ‚îÄ TaskCard.jsx\n‚îÇ   ‚îú‚îÄ‚îÄ TaskForm.jsx\n‚îÇ   ‚îú‚îÄ‚îÄ TaskList.jsx\n‚îÇ   ‚îú‚îÄ‚îÄ CategoryFilter.jsx\n‚îÇ   ‚îú‚îÄ‚îÄ SearchBar.jsx\n‚îÇ   ‚îî‚îÄ‚îÄ ThemeToggle.jsx\n‚îú‚îÄ‚îÄ pages/\n‚îÇ   ‚îú‚îÄ‚îÄ Dashboard.jsx\n‚îÇ   ‚îú‚îÄ‚îÄ TaskDetails.jsx\n‚îÇ   ‚îî‚îÄ‚îÄ Statistics.jsx\n‚îú‚îÄ‚îÄ store/\n‚îÇ   ‚îî‚îÄ‚îÄ taskStore.js\n‚îú‚îÄ‚îÄ hooks/\n‚îÇ   ‚îú‚îÄ‚îÄ useLocalStorage.js\n‚îÇ   ‚îî‚îÄ‚îÄ useDebounce.js\n‚îî‚îÄ‚îÄ utils/\n    ‚îú‚îÄ‚îÄ taskHelpers.js\n    ‚îî‚îÄ‚îÄ dateHelpers.js\n```\n          ",steps:[{step:1,title:"Cr√©er la structure de base",code:"// src/components/TaskCard.jsx\nimport { Card, Button, Badge, Text } from '@shopify/polaris';\nimport { DeleteIcon, EditIcon } from '@shopify/polaris-icons';\n\nfunction TaskCard({ task, onEdit, onDelete, onToggle }) {\n  const priorityColors = {\n    low: 'success',\n    medium: 'warning', \n    high: 'critical'\n  };\n\n  return (\n    <div className=\"fade-in\">\n      <Card>\n        <div style={{ padding: '1rem' }}>\n          <div style={{ \n            display: 'flex', \n            justifyContent: 'space-between', \n            alignItems: 'flex-start',\n            marginBottom: '0.5rem'\n          }}>\n            <Text \n              variant=\"headingSm\" \n              style={{ \n                textDecoration: task.completed ? 'line-through' : 'none',\n                opacity: task.completed ? 0.6 : 1\n              }}\n            >\n              {task.title}\n            </Text>\n            <Badge status={priorityColors[task.priority]}>\n              {task.priority}\n            </Badge>\n          </div>\n          \n          <Text variant=\"bodySm\" color=\"subdued\">\n            {task.description}\n          </Text>\n          \n          <div style={{ \n            display: 'flex', \n            justifyContent: 'space-between', \n            alignItems: 'center',\n            marginTop: '1rem'\n          }}>\n            <Badge>{task.category}</Badge>\n            \n            <div style={{ display: 'flex', gap: '0.5rem' }}>\n              <Button \n                size=\"slim\" \n                onClick={() => onToggle(task.id)}\n              >\n                {task.completed ? 'Annuler' : 'Terminer'}\n              </Button>\n              <Button \n                size=\"slim\" \n                icon={EditIcon}\n                onClick={() => onEdit(task)}\n              />\n              <Button \n                size=\"slim\" \n                icon={DeleteIcon}\n                destructive\n                onClick={() => onDelete(task.id)}\n              />\n            </div>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nexport default TaskCard;"}]}},{id:"state-management",title:"Gestion d'√âtat avec Zustand",description:"Configuration du store global pour les t√¢ches",type:"project",duration:"25 min",content:{theory:"\nNous allons utiliser **Zustand** pour g√©rer l'√©tat global de notre application de mani√®re simple et efficace.\n\n**Fonctionnalit√©s du Store :**\n- üìù CRUD complet des t√¢ches\n- üîç Filtrage et recherche\n- üìä Calculs statistiques\n- üé® Gestion du th√®me\n- üíæ Persistance automatique\n          ",steps:[{step:1,title:"Installation de Zustand",code:"npm install zustand"},{step:2,title:"Cr√©ation du store de t√¢ches",code:"// src/store/taskStore.js\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nconst useTaskStore = create(\n  persist(\n    (set, get) => ({\n      // √âtat initial\n      tasks: [],\n      filter: 'all', // all, active, completed\n      searchTerm: '',\n      selectedCategory: 'all',\n      theme: 'light',\n      \n      // Actions pour les t√¢ches\n      addTask: (task) => set((state) => ({\n        tasks: [...state.tasks, {\n          id: Date.now().toString(),\n          ...task,\n          completed: false,\n          createdAt: new Date().toISOString()\n        }]\n      })),\n      \n      updateTask: (id, updates) => set((state) => ({\n        tasks: state.tasks.map(task => \n          task.id === id ? { ...task, ...updates } : task\n        )\n      })),\n      \n      deleteTask: (id) => set((state) => ({\n        tasks: state.tasks.filter(task => task.id !== id)\n      })),\n      \n      toggleTask: (id) => set((state) => ({\n        tasks: state.tasks.map(task =>\n          task.id === id ? { ...task, completed: !task.completed } : task\n        )\n      })),\n      \n      // Actions pour les filtres\n      setFilter: (filter) => set({ filter }),\n      setSearchTerm: (searchTerm) => set({ searchTerm }),\n      setSelectedCategory: (category) => set({ selectedCategory: category }),\n      \n      // Action pour le th√®me\n      toggleTheme: () => set((state) => ({\n        theme: state.theme === 'light' ? 'dark' : 'light'\n      })),\n      \n      // S√©lecteurs calcul√©s\n      getFilteredTasks: () => {\n        const { tasks, filter, searchTerm, selectedCategory } = get();\n        \n        return tasks.filter(task => {\n          // Filtre par statut\n          const statusMatch = filter === 'all' || \n            (filter === 'active' && !task.completed) ||\n            (filter === 'completed' && task.completed);\n            \n          // Filtre par recherche\n          const searchMatch = searchTerm === '' ||\n            task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            task.description.toLowerCase().includes(searchTerm.toLowerCase());\n            \n          // Filtre par cat√©gorie\n          const categoryMatch = selectedCategory === 'all' || \n            task.category === selectedCategory;\n            \n          return statusMatch && searchMatch && categoryMatch;\n        });\n      },\n      \n      getStatistics: () => {\n        const { tasks } = get();\n        const total = tasks.length;\n        const completed = tasks.filter(task => task.completed).length;\n        const active = total - completed;\n        \n        return {\n          total,\n          completed,\n          active,\n          completionRate: total > 0 ? Math.round((completed / total) * 100) : 0\n        };\n      },\n      \n      getCategories: () => {\n        const { tasks } = get();\n        const categories = [...new Set(tasks.map(task => task.category))];\n        return categories.filter(Boolean);\n      }\n    }),\n    {\n      name: 'task-manager-storage',\n      version: 1\n    }\n  )\n);\n\nexport default useTaskStore;"}]}},{id:"components-forms",title:"Composants et Formulaires",description:"Cr√©ation des composants principaux et formulaires",type:"project",duration:"30 min",content:{theory:"\nNous allons cr√©er les composants essentiels de notre application :\n- **TaskForm** - Formulaire d'ajout/modification de t√¢ches\n- **TaskList** - Liste des t√¢ches avec animations\n- **SearchBar** - Barre de recherche avec debounce\n- **CategoryFilter** - Filtres par cat√©gorie\n          ",steps:[{step:1,title:"Formulaire de t√¢che avec validation",code:"// src/components/TaskForm.jsx\nimport { useState } from 'react';\nimport { Card, FormLayout, TextField, Select, Button, ButtonGroup } from '@shopify/polaris';\nimport useTaskStore from '../store/taskStore';\n\nfunction TaskForm({ task = null, onClose }) {\n  const { addTask, updateTask } = useTaskStore();\n  \n  const [formData, setFormData] = useState({\n    title: task?.title || '',\n    description: task?.description || '',\n    category: task?.category || '',\n    priority: task?.priority || 'medium'\n  });\n  \n  const [errors, setErrors] = useState({});\n  \n  const priorityOptions = [\n    { label: 'Faible', value: 'low' },\n    { label: 'Moyenne', value: 'medium' },\n    { label: '√âlev√©e', value: 'high' }\n  ];\n  \n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData.title.trim()) {\n      newErrors.title = 'Le titre est obligatoire';\n    }\n    \n    if (!formData.category.trim()) {\n      newErrors.category = 'La cat√©gorie est obligatoire';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) return;\n    \n    if (task) {\n      updateTask(task.id, formData);\n    } else {\n      addTask(formData);\n    }\n    \n    onClose();\n  };\n  \n  const handleChange = (field) => (value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n  };\n  \n  return (\n    <Card>\n      <form onSubmit={handleSubmit}>\n        <div style={{ padding: '1.5rem' }}>\n          <FormLayout>\n            <TextField\n              label=\"Titre de la t√¢che\"\n              value={formData.title}\n              onChange={handleChange('title')}\n              error={errors.title}\n              autoComplete=\"off\"\n            />\n            \n            <TextField\n              label=\"Description\"\n              value={formData.description}\n              onChange={handleChange('description')}\n              multiline={3}\n              autoComplete=\"off\"\n            />\n            \n            <TextField\n              label=\"Cat√©gorie\"\n              value={formData.category}\n              onChange={handleChange('category')}\n              error={errors.category}\n              placeholder=\"ex: Travail, Personnel, √âtudes...\"\n              autoComplete=\"off\"\n            />\n            \n            <Select\n              label=\"Priorit√©\"\n              options={priorityOptions}\n              value={formData.priority}\n              onChange={handleChange('priority')}\n            />\n            \n            <ButtonGroup>\n              <Button \n                variant=\"primary\" \n                submit\n              >\n                {task ? 'Modifier' : 'Ajouter'}\n              </Button>\n              <Button onClick={onClose}>\n                Annuler\n              </Button>\n            </ButtonGroup>\n          </FormLayout>\n        </div>\n      </form>\n    </Card>\n  );\n}\n\nexport default TaskForm;"},{step:2,title:"Hook personnalis√© pour debounce",code:"// src/hooks/useDebounce.js\nimport { useState, useEffect } from 'react';\n\nfunction useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\nexport default useDebounce;"}]}},{id:"routing-navigation",title:"Navigation avec React Router",description:"Configuration du routage et des pages",type:"project",duration:"25 min",content:{theory:"\nNous allons ajouter la navigation entre diff√©rentes vues :\n- **Dashboard** - Vue principale avec toutes les t√¢ches\n- **Statistics** - Statistiques et graphiques\n- **TaskDetails** - D√©tails d'une t√¢che sp√©cifique\n\n**Installation :**\n```bash\nnpm install react-router-dom\n```\n          ",steps:[{step:1,title:"Configuration du routeur principal",code:"// src/App.jsx\nimport { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';\nimport { AppProvider } from '@shopify/polaris';\nimport Dashboard from './pages/Dashboard';\nimport Statistics from './pages/Statistics';\nimport TaskDetails from './pages/TaskDetails';\nimport Layout from './components/Layout';\nimport useTaskStore from './store/taskStore';\n\nfunction App() {\n  const { theme } = useTaskStore();\n  \n  return (\n    <AppProvider \n      theme={theme === 'dark' ? 'dark' : undefined}\n      features={{ newDesignLanguage: true }}\n    >\n      <BrowserRouter>\n        <Layout>\n          <Routes>\n            <Route path=\"/\" element={<Navigate to=\"/dashboard\" replace />} />\n            <Route path=\"/dashboard\" element={<Dashboard />} />\n            <Route path=\"/statistics\" element={<Statistics />} />\n            <Route path=\"/task/:id\" element={<TaskDetails />} />\n          </Routes>\n        </Layout>\n      </BrowserRouter>\n    </AppProvider>\n  );\n}\n\nexport default App;"},{step:2,title:"Composant Layout avec navigation",code:"// src/components/Layout.jsx\nimport { Frame, Navigation, TopBar } from '@shopify/polaris';\nimport { HomeIcon, AnalyticsIcon, SettingsIcon } from '@shopify/polaris-icons';\nimport { useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport useTaskStore from '../store/taskStore';\nimport ThemeToggle from './ThemeToggle';\n\nfunction Layout({ children }) {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { getStatistics } = useTaskStore();\n  const [mobileNavigationActive, setMobileNavigationActive] = useState(false);\n  \n  const stats = getStatistics();\n  \n  const navigationMarkup = (\n    <Navigation location={location.pathname}>\n      <Navigation.Section\n        items={[\n          {\n            label: 'Tableau de bord',\n            icon: HomeIcon,\n            url: '/dashboard',\n            selected: location.pathname === '/dashboard',\n            onClick: () => navigate('/dashboard')\n          },\n          {\n            label: 'Statistiques',\n            icon: AnalyticsIcon,\n            url: '/statistics',\n            selected: location.pathname === '/statistics',\n            onClick: () => navigate('/statistics'),\n            badge: stats.total > 0 ? stats.total.toString() : undefined\n          }\n        ]}\n      />\n    </Navigation>\n  );\n  \n  const topBarMarkup = (\n    <TopBar\n      showNavigationToggle\n      onNavigationToggle={() => setMobileNavigationActive(!mobileNavigationActive)}\n      secondaryMenu={<ThemeToggle />}\n    />\n  );\n  \n  return (\n    <Frame\n      topBar={topBarMarkup}\n      navigation={navigationMarkup}\n      showMobileNavigation={mobileNavigationActive}\n      onNavigationDismiss={() => setMobileNavigationActive(false)}\n    >\n      {children}\n    </Frame>\n  );\n}\n\nexport default Layout;"}]}},{id:"dashboard-page",title:"Page Dashboard Compl√®te",description:"Assemblage de tous les composants sur la page principale",type:"project",duration:"20 min",content:{theory:"\nLa page Dashboard sera le c≈ìur de notre application. Elle int√©grera :\n- **Filtres et recherche** en temps r√©el\n- **Liste de t√¢ches** avec animations\n- **Formulaire modal** pour ajouter/modifier\n- **Statistiques rapides** en en-t√™te\n          ",steps:[{step:1,title:"Page Dashboard compl√®te",code:"// src/pages/Dashboard.jsx\nimport { useState } from 'react';\nimport { Page, Layout, Card, Button, Modal, EmptyState, Text, Badge, ButtonGroup } from '@shopify/polaris';\nimport { PlusIcon, SearchIcon } from '@shopify/polaris-icons';\nimport useTaskStore from '../store/taskStore';\nimport TaskCard from '../components/TaskCard';\nimport TaskForm from '../components/TaskForm';\nimport SearchBar from '../components/SearchBar';\nimport CategoryFilter from '../components/CategoryFilter';\n\nfunction Dashboard() {\n  const {\n    getFilteredTasks,\n    deleteTask,\n    toggleTask,\n    filter,\n    setFilter,\n    getStatistics,\n    getCategories\n  } = useTaskStore();\n  \n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingTask, setEditingTask] = useState(null);\n  \n  const tasks = getFilteredTasks();\n  const stats = getStatistics();\n  const categories = getCategories();\n  \n  const filterOptions = [\n    { label: 'Toutes', value: 'all' },\n    { label: 'Actives', value: 'active' },\n    { label: 'Termin√©es', value: 'completed' }\n  ];\n  \n  const handleEdit = (task) => {\n    setEditingTask(task);\n    setIsFormOpen(true);\n  };\n  \n  const handleCloseForm = () => {\n    setIsFormOpen(false);\n    setEditingTask(null);\n  };\n  \n  const primaryAction = {\n    content: 'Nouvelle t√¢che',\n    icon: PlusIcon,\n    onAction: () => setIsFormOpen(true)\n  };\n  \n  return (\n    <Page\n      title=\"Gestionnaire de T√¢ches\"\n      subtitle={`${stats.total} t√¢ches au total ‚Ä¢ ${stats.completed} termin√©es ‚Ä¢ ${stats.active} actives`}\n      primaryAction={primaryAction}\n    >\n      <Layout>\n        <Layout.Section>\n          <Card>\n            <div style={{ padding: '1rem' }}>\n              <div style={{\n                display: 'grid',\n                gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',\n                gap: '1rem',\n                marginBottom: '1rem'\n              }}>\n                <div style={{ textAlign: 'center' }}>\n                  <Text variant=\"headingLg\">{stats.total}</Text>\n                  <Text variant=\"bodySm\" color=\"subdued\">Total</Text>\n                </div>\n                <div style={{ textAlign: 'center' }}>\n                  <Text variant=\"headingLg\" style={{ color: '#00a96e' }}>{stats.completed}</Text>\n                  <Text variant=\"bodySm\" color=\"subdued\">Termin√©es</Text>\n                </div>\n                <div style={{ textAlign: 'center' }}>\n                  <Text variant=\"headingLg\" style={{ color: '#2c5aa0' }}>{stats.active}</Text>\n                  <Text variant=\"bodySm\" color=\"subdued\">Actives</Text>\n                </div>\n                <div style={{ textAlign: 'center' }}>\n                  <Text variant=\"headingLg\">{stats.completionRate}%</Text>\n                  <Text variant=\"bodySm\" color=\"subdued\">Progression</Text>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </Layout.Section>\n        \n        <Layout.Section>\n          <Card>\n            <div style={{ padding: '1rem' }}>\n              <div style={{\n                display: 'flex',\n                gap: '1rem',\n                marginBottom: '1rem',\n                flexWrap: 'wrap'\n              }}>\n                <div style={{ flex: 1, minWidth: '200px' }}>\n                  <SearchBar />\n                </div>\n                <CategoryFilter categories={categories} />\n              </div>\n              \n              <ButtonGroup segmented>\n                {filterOptions.map(option => (\n                  <Button\n                    key={option.value}\n                    pressed={filter === option.value}\n                    onClick={() => setFilter(option.value)}\n                  >\n                    {option.label}\n                  </Button>\n                ))}\n              </ButtonGroup>\n            </div>\n          </Card>\n        </Layout.Section>\n        \n        <Layout.Section>\n          {tasks.length === 0 ? (\n            <Card>\n              <EmptyState\n                heading=\"Aucune t√¢che trouv√©e\"\n                image=\"https://cdn.shopify.com/s/files/1/0262/4071/2726/files/emptystate-files.png\"\n                action={{\n                  content: 'Cr√©er une t√¢che',\n                  onAction: () => setIsFormOpen(true)\n                }}\n              >\n                <p>Commencez par cr√©er votre premi√®re t√¢che pour organiser votre travail.</p>\n              </EmptyState>\n            </Card>\n          ) : (\n            <div style={{\n              display: 'grid',\n              gap: '1rem',\n              gridTemplateColumns: 'repeat(auto-fill, minmax(350px, 1fr))'\n            }}>\n              {tasks.map(task => (\n                <TaskCard\n                  key={task.id}\n                  task={task}\n                  onEdit={handleEdit}\n                  onDelete={deleteTask}\n                  onToggle={toggleTask}\n                />\n              ))}\n            </div>\n          )}\n        </Layout.Section>\n      </Layout>\n      \n      <Modal\n        open={isFormOpen}\n        onClose={handleCloseForm}\n        title={editingTask ? 'Modifier la t√¢che' : 'Nouvelle t√¢che'}\n        large\n      >\n        <Modal.Section>\n          <TaskForm\n            task={editingTask}\n            onClose={handleCloseForm}\n          />\n        </Modal.Section>\n      </Modal>\n    </Page>\n  );\n}\n\nexport default Dashboard;"}]}},{id:"testing-deployment",title:"Tests et D√©ploiement",description:"Tests unitaires et pr√©paration pour la production",type:"project",duration:"20 min",content:{theory:"\nPour finaliser notre projet, nous ajouterons :\n- **Tests unitaires** pour les composants principaux\n- **Tests d'int√©gration** pour le store\n- **Optimisations** pour la production\n- **Scripts de d√©ploiement**\n          ",steps:[{step:1,title:"Tests du store Zustand",code:"// src/store/__tests__/taskStore.test.js\nimport { describe, it, expect, beforeEach } from 'vitest';\nimport { act } from '@testing-library/react';\nimport useTaskStore from '../taskStore';\n\ndescribe('Task Store', () => {\n  beforeEach(() => {\n    useTaskStore.setState({\n      tasks: [],\n      filter: 'all',\n      searchTerm: '',\n      selectedCategory: 'all'\n    });\n  });\n\n  it('should add a new task', () => {\n    const { addTask, tasks } = useTaskStore.getState();\n    \n    act(() => {\n      addTask({\n        title: 'Test Task',\n        description: 'Test Description',\n        category: 'Test',\n        priority: 'medium'\n      });\n    });\n\n    const updatedTasks = useTaskStore.getState().tasks;\n    expect(updatedTasks).toHaveLength(1);\n    expect(updatedTasks[0].title).toBe('Test Task');\n    expect(updatedTasks[0].completed).toBe(false);\n  });\n\n  it('should toggle task completion', () => {\n    const { addTask, toggleTask } = useTaskStore.getState();\n    \n    act(() => {\n      addTask({\n        title: 'Test Task',\n        description: 'Test Description',\n        category: 'Test',\n        priority: 'medium'\n      });\n    });\n\n    const taskId = useTaskStore.getState().tasks[0].id;\n    \n    act(() => {\n      toggleTask(taskId);\n    });\n\n    const updatedTask = useTaskStore.getState().tasks[0];\n    expect(updatedTask.completed).toBe(true);\n  });\n\n  it('should calculate statistics correctly', () => {\n    const { addTask, toggleTask, getStatistics } = useTaskStore.getState();\n    \n    act(() => {\n      addTask({ title: 'Task 1', description: '', category: 'Work', priority: 'high' });\n      addTask({ title: 'Task 2', description: '', category: 'Personal', priority: 'low' });\n    });\n\n    const taskId = useTaskStore.getState().tasks[0].id;\n    \n    act(() => {\n      toggleTask(taskId);\n    });\n\n    const stats = getStatistics();\n    expect(stats.total).toBe(2);\n    expect(stats.completed).toBe(1);\n    expect(stats.active).toBe(1);\n    expect(stats.completionRate).toBe(50);\n  });\n});"},{step:2,title:"Test du composant TaskCard",code:"// src/components/__tests__/TaskCard.test.jsx\nimport { describe, it, expect, vi } from 'vitest';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { AppProvider } from '@shopify/polaris';\nimport TaskCard from '../TaskCard';\n\nconst mockTask = {\n  id: '1',\n  title: 'Test Task',\n  description: 'Test Description',\n  category: 'Work',\n  priority: 'high',\n  completed: false\n};\n\nconst renderWithProviders = (component) => {\n  return render(\n    <AppProvider>\n      {component}\n    </AppProvider>\n  );\n};\n\ndescribe('TaskCard', () => {\n  const mockProps = {\n    task: mockTask,\n    onEdit: vi.fn(),\n    onDelete: vi.fn(),\n    onToggle: vi.fn()\n  };\n\n  it('renders task information correctly', () => {\n    renderWithProviders(<TaskCard {...mockProps} />);\n    \n    expect(screen.getByText('Test Task')).toBeInTheDocument();\n    expect(screen.getByText('Test Description')).toBeInTheDocument();\n    expect(screen.getByText('Work')).toBeInTheDocument();\n    expect(screen.getByText('high')).toBeInTheDocument();\n  });\n\n  it('calls onToggle when toggle button is clicked', () => {\n    renderWithProviders(<TaskCard {...mockProps} />);\n    \n    const toggleButton = screen.getByText('Terminer');\n    fireEvent.click(toggleButton);\n    \n    expect(mockProps.onToggle).toHaveBeenCalledWith('1');\n  });\n\n  it('calls onDelete when delete button is clicked', () => {\n    renderWithProviders(<TaskCard {...mockProps} />);\n    \n    const deleteButton = screen.getByRole('button', { name: /delete/i });\n    fireEvent.click(deleteButton);\n    \n    expect(mockProps.onDelete).toHaveBeenCalledWith('1');\n  });\n\n  it('shows different text for completed tasks', () => {\n    const completedTask = { ...mockTask, completed: true };\n    \n    renderWithProviders(\n      <TaskCard {...mockProps} task={completedTask} />\n    );\n    \n    expect(screen.getByText('Annuler')).toBeInTheDocument();\n  });\n});"},{step:3,title:"Configuration Vite pour la production",code:'// vite.config.js\nimport { defineConfig } from \'vite\';\nimport react from \'@vitejs/plugin-react\';\n\nexport default defineConfig({\n  plugins: [react()],\n  build: {\n    outDir: \'dist\',\n    sourcemap: true,\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: [\'react\', \'react-dom\'],\n          ui: [\'@shopify/polaris\'],\n          router: [\'react-router-dom\'],\n          store: [\'zustand\']\n        }\n      }\n    }\n  },\n  test: {\n    globals: true,\n    environment: \'jsdom\',\n    setupFiles: [\'./src/setupTests.js\']\n  }\n});\n\n// package.json scripts\n{\n  "scripts": {\n    "dev": "vite",\n    "build": "vite build",\n    "preview": "vite preview",\n    "test": "vitest",\n    "test:ui": "vitest --ui",\n    "test:coverage": "vitest --coverage",\n    "lint": "eslint src",\n    "deploy": "npm run build && npm run preview"\n  }\n}'}]}}]}],L={totalModules:D.length,totalLessons:D.reduce((e,n)=>e+n.lessons.length,0),estimatedDuration:D.reduce((e,n)=>e+parseInt(n.duration.replace(" min","")),0)};function E({children:n}){const[t,s]=r.useState(0),[o,i]=r.useState(0),[a,c]=r.useState(new Set),[l,d]=r.useState({totalLessons:0,completedLessons:0,currentStreak:0}),u=D[t],p=u?.lessons[o],m=()=>{o<u.lessons.length-1?i(e=>e+1):t<D.length-1&&(s(e=>e+1),i(0))},h={currentModule:u,currentLesson:p,currentModuleIndex:t,currentLessonIndex:o,completedLessons:a,userProgress:l,courseModules:D,completeLesson:()=>{const e=`${t}-${o}`;c(n=>new Set([...n,e])),d(e=>({...e,completedLessons:e.completedLessons+1,currentStreak:e.currentStreak+1})),m()},goToNextLesson:m,goToPreviousLesson:()=>{o>0?i(e=>e-1):t>0&&(s(e=>e-1),i(D[t-1].lessons.length-1))},navigateToLesson:(e,n)=>{s(e),i(n)},isLessonCompleted:(e,n)=>a.has(`${e}-${n}`),getProgressPercentage:()=>{const e=D.reduce((e,n)=>e+n.lessons.length,0);return a.size/e*100}};return e.jsx(P.Provider,{value:h,children:n})}function A(){const e=r.useContext(P);if(!e)throw new Error("useCourse must be used within a CourseProvider");return e}const M={'code[class*="language-"]':{color:"#ccc",background:"none",fontFamily:"Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",fontSize:"1em",textAlign:"left",whiteSpace:"pre",wordSpacing:"normal",wordBreak:"normal",wordWrap:"normal",lineHeight:"1.5",MozTabSize:"4",OTabSize:"4",tabSize:"4",WebkitHyphens:"none",MozHyphens:"none",msHyphens:"none",hyphens:"none"},'pre[class*="language-"]':{color:"#ccc",background:"#2d2d2d",fontFamily:"Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",fontSize:"1em",textAlign:"left",whiteSpace:"pre",wordSpacing:"normal",wordBreak:"normal",wordWrap:"normal",lineHeight:"1.5",MozTabSize:"4",OTabSize:"4",tabSize:"4",WebkitHyphens:"none",MozHyphens:"none",msHyphens:"none",hyphens:"none",padding:"1em",margin:".5em 0",overflow:"auto"},':not(pre) > code[class*="language-"]':{background:"#2d2d2d",padding:".1em",borderRadius:".3em",whiteSpace:"normal"},comment:{color:"#999"},"block-comment":{color:"#999"},prolog:{color:"#999"},doctype:{color:"#999"},cdata:{color:"#999"},punctuation:{color:"#ccc"},tag:{color:"#e2777a"},"attr-name":{color:"#e2777a"},namespace:{color:"#e2777a"},deleted:{color:"#e2777a"},"function-name":{color:"#6196cc"},boolean:{color:"#f08d49"},number:{color:"#f08d49"},function:{color:"#f08d49"},property:{color:"#f8c555"},"class-name":{color:"#f8c555"},constant:{color:"#f8c555"},symbol:{color:"#f8c555"},selector:{color:"#cc99cd"},important:{color:"#cc99cd",fontWeight:"bold"},atrule:{color:"#cc99cd"},keyword:{color:"#cc99cd"},builtin:{color:"#cc99cd"},string:{color:"#7ec699"},char:{color:"#7ec699"},"attr-value":{color:"#7ec699"},regex:{color:"#7ec699"},variable:{color:"#7ec699"},operator:{color:"#67cdcc"},entity:{color:"#67cdcc",cursor:"help"},url:{color:"#67cdcc"},bold:{fontWeight:"bold"},italic:{fontStyle:"italic"},inserted:{color:"green"}};function I({interactive:t}){const[l,d]=r.useState("");if(!t)return e.jsx(s,{variant:"bodyMd",color:"subdued",children:"No interactive content available for this lesson."});const u=()=>{const[u,p]=r.useState(t.initialCode||""),[m,h]=r.useState(!1);return e.jsxs("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"},children:[e.jsx(o,{children:e.jsxs("div",{style:{padding:"1rem"},children:[e.jsx(s,{variant:"bodyMd",fontWeight:"semibold",style:{marginBottom:"1rem"},children:"üíª Code Editor"}),e.jsx(a,{label:"Your Code",value:u,onChange:p,multiline:6,helpText:"Try modifying the code and see what happens!"}),e.jsx("div",{style:{marginTop:"1rem"},children:e.jsxs("div",{style:{display:"flex",gap:"0.5rem"},children:[e.jsxs(i,{onClick:()=>h(!m),size:"slim",children:[m?"Hide":"Show"," Solution"]}),e.jsx(i,{primary:!0,onClick:()=>{d("Code executed successfully! ‚úÖ"),setTimeout(()=>d(""),3e3)},size:"slim",children:"Run Code"})]})})]})}),m&&t.solution&&e.jsx("div",{className:"slide-in-bottom",children:e.jsx(o,{children:e.jsxs("div",{style:{padding:"1rem"},children:[e.jsx(s,{variant:"bodyMd",fontWeight:"semibold",style:{marginBottom:"1rem"},children:"‚úÖ Solution"}),e.jsx(n,{language:"javascript",style:M,customStyle:{borderRadius:"8px",fontSize:"14px"},children:t.solution})]})})}),l&&e.jsx("div",{className:"slide-in-bottom",children:e.jsx(c,{status:"success",children:l})})]})},p=()=>{const[n,a]=r.useState(0),c=t.commands||[];return e.jsx(o,{children:e.jsxs("div",{style:{padding:"1rem",backgroundColor:"#1e1e1e",color:"#ffffff",fontFamily:"monospace",borderRadius:"8px",minHeight:"200px"},children:[e.jsx(s,{variant:"bodyMd",fontWeight:"semibold",style:{color:"#ffffff",marginBottom:"1rem"},children:"üíª Terminal Simulator"}),c.slice(0,n+1).map((n,t)=>e.jsxs("div",{className:"fade-in",style:{marginBottom:"0.5rem",animationDelay:.5*t+"s"},children:[e.jsxs("div",{style:{color:"#00ff00"},children:["$ ",n.command]}),e.jsx("div",{style:{color:"#cccccc",marginLeft:"1rem"},children:n.output})]},t)),n<c.length-1&&e.jsx("div",{className:"fade-in",style:{animationDelay:"1s"},children:e.jsx(i,{size:"slim",onClick:()=>a(e=>e+1),children:"Run Next Command"})})]})})},m=()=>e.jsx("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"},children:e.jsx(o,{children:e.jsxs("div",{style:{padding:"1rem"},children:[e.jsx(s,{variant:"bodyMd",fontWeight:"semibold",style:{marginBottom:"1rem"},children:"üß© Component Builder"}),e.jsx(s,{variant:"bodyMd",color:"subdued",style:{marginBottom:"1rem"},children:t.task}),t.template&&e.jsx(n,{language:"javascript",style:M,customStyle:{borderRadius:"8px",fontSize:"14px"},children:t.template}),e.jsx("div",{style:{marginTop:"1rem"},children:e.jsx(i,{primary:!0,children:"Build Component"})})]})})});return e.jsx("div",{className:"scale-in",children:(()=>{switch(t.type){case"file-explorer":return(()=>{const n=({file:t,level:r=0})=>e.jsxs("div",{className:"fade-in",style:{marginLeft:20*r+"px",padding:"4px 8px",cursor:"file"===t.type?"pointer":"default",animationDelay:.1*r+"s"},children:[e.jsxs("div",{style:{display:"flex",alignItems:"center",gap:"0.25rem"},children:[e.jsx("span",{children:"folder"===t.type?"üìÅ":"üìÑ"}),e.jsx(s,{variant:"bodySm",fontWeight:"folder"===t.type?"semibold":"regular",children:t.name})]}),t.children&&t.children.map((t,s)=>e.jsx(n,{file:t,level:r+1},s))]});return e.jsx(o,{children:e.jsxs("div",{style:{padding:"1rem",backgroundColor:"#f8f9fa",minHeight:"200px"},children:[e.jsx(s,{variant:"bodyMd",fontWeight:"semibold",style:{marginBottom:"1rem"},children:"üìÇ Project Structure Explorer"}),t.files?.map((t,r)=>e.jsx(n,{file:t},r))]})})})();case"code-editor":return e.jsx(u,{});case"terminal-simulator":return e.jsx(p,{});case"component-builder":return e.jsx(m,{});default:return e.jsx(o,{children:e.jsx("div",{style:{padding:"1rem",textAlign:"center"},children:e.jsxs(s,{variant:"bodyMd",color:"subdued",children:['Interactive demo type "',t.type,'" not yet implemented.']})})})}})()})}function F({lesson:r}){if(!r||!r.content)return e.jsx(o,{children:e.jsx("div",{style:{padding:"2rem",textAlign:"center"},children:e.jsx(s,{variant:"bodyMd",children:"Aucun contenu disponible pour cette le√ßon."})})});const{content:i}=r;return e.jsx("div",{className:"fade-in",children:e.jsxs("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"},children:[i.theory&&e.jsx("div",{className:"slide-in-bottom",children:e.jsx(o,{children:e.jsxs("div",{style:{padding:"1.5rem"},children:[e.jsx(s,{variant:"headingMd",as:"h3",style:{marginBottom:"1rem"},children:"üìö Th√©orie"}),e.jsx("div",{className:"lesson-theory",children:e.jsx(t,{components:{code({inline:t,className:r,children:s,...o}){const i=/language-(\w+)/.exec(r||"");return!t&&i?e.jsx("div",{className:"scale-in",style:{animationDelay:"0.2s"},children:e.jsx(n,{style:M,language:i[1],PreTag:"div",...o,children:String(s).replace(/\n$/,"")})}):e.jsx("code",{...o,children:s})},table:({children:n})=>e.jsx("div",{style:{overflow:"auto",margin:"1rem 0"},children:e.jsx("table",{style:{width:"100%",borderCollapse:"collapse",border:"1px solid #e1e5e9"},children:n})}),th:({children:n})=>e.jsx("th",{style:{padding:"0.75rem",backgroundColor:"#f6f8fa",border:"1px solid #e1e5e9",textAlign:"left",fontWeight:"bold"},children:n}),td:({children:n})=>e.jsx("td",{style:{padding:"0.75rem",border:"1px solid #e1e5e9"},children:n}),blockquote:({children:n})=>e.jsx("div",{className:"slide-in-left",style:{borderLeft:"4px solid #00a96e",paddingLeft:"1rem",margin:"1rem 0",backgroundColor:"#f8fffe",padding:"1rem",animationDelay:"0.3s"},children:n})},children:i.theory})})]})})}),i.codeExample&&e.jsx("div",{className:"slide-in-bottom",children:e.jsx(o,{children:e.jsxs("div",{style:{padding:"1.5rem"},children:[e.jsx(s,{variant:"headingMd",as:"h3",style:{marginBottom:"1rem"},children:"üíª Exemple de Code"}),e.jsx("div",{className:"scale-in",style:{animationDelay:"0.1s"},children:e.jsx(n,{language:"javascript",style:M,customStyle:{borderRadius:"8px",fontSize:"14px"},children:i.codeExample})})]})})}),i.interactive&&e.jsx("div",{className:"slide-in-bottom",children:e.jsx(o,{children:e.jsxs("div",{style:{padding:"1.5rem"},children:[e.jsx(s,{variant:"headingMd",as:"h3",style:{marginBottom:"1rem"},children:"üéÆ D√©mo Interactive"}),e.jsx(I,{interactive:i.interactive})]})})}),"practical"===r.type&&!i.interactive&&e.jsx("div",{className:"slide-in-bottom",children:e.jsx(o,{children:e.jsxs("div",{style:{padding:"1.5rem"},children:[e.jsx(s,{variant:"headingMd",as:"h3",style:{marginBottom:"1rem"},children:"üõ†Ô∏è Exercice Pratique"}),e.jsx(s,{variant:"bodyMd",color:"subdued",children:"Essayez d'impl√©menter les concepts de cette le√ßon dans votre propre √©diteur de code. Exp√©rimentez avec les exemples et cr√©ez vos propres variations !"})]})})})]})})}function U(){const[e,n]=r.useState("desktop");return r.useEffect(()=>{function e(){const e=window.innerWidth;n(e<480?"mobile":e<768?"tablet":e<1024?"desktop":"large")}return e(),window.addEventListener("resize",e),()=>window.removeEventListener("resize",e)},[]),{screenSize:e,isMobile:"mobile"===e,isTablet:"tablet"===e,isDesktop:"desktop"===e||"large"===e,isLarge:"large"===e}}function N({children:n,className:t=""}){const{screenSize:r}=U();return e.jsx("div",{className:t,style:{mobile:{display:"grid",gridTemplateColumns:"1fr",gap:"0.5rem"},tablet:{display:"grid",gridTemplateColumns:"repeat(auto-fit, minmax(280px, 1fr))",gap:"1rem"},desktop:{display:"grid",gridTemplateColumns:"repeat(auto-fit, minmax(320px, 1fr))",gap:"1.5rem"},large:{display:"grid",gridTemplateColumns:"repeat(auto-fit, minmax(360px, 1fr))",gap:"2rem"}}[r],children:n})}function z({on:e=[],children:n}){const{screenSize:t}=U();return e.includes(t)?n:null}function H({children:n,className:t=""}){const{screenSize:r}=U();return e.jsx("div",{className:t,style:{mobile:{padding:"0.5rem",maxWidth:"100%",margin:"0"},tablet:{padding:"1rem",maxWidth:"768px",margin:"0 auto"},desktop:{padding:"1.5rem",maxWidth:"1024px",margin:"0 auto"},large:{padding:"2rem",maxWidth:"1200px",margin:"0 auto"}}[r],children:n})}function q({onBackToHome:n}){const{currentModule:t,currentLesson:r,currentModuleIndex:a,currentLessonIndex:c,courseModules:g,goToNextLesson:f,goToPreviousLesson:v,completeLesson:y,getProgressPercentage:x,isLessonCompleted:b,navigateToLesson:k}=A();if(!t||!r)return e.jsx(H,{children:e.jsx(o,{children:e.jsx("div",{style:{padding:"2rem",textAlign:"center"},children:e.jsx(s,{variant:"headingMd",children:"Chargement du contenu du cours..."})})})});const C=c<t?.lessons.length-1||a<g.length-1,j=c>0||a>0,T=b(a,c),S=e.jsx(o,{children:e.jsxs("div",{style:{padding:"1.5rem"},children:[e.jsxs("div",{style:{display:"flex",alignItems:"center",gap:"0.5rem",marginBottom:"1rem",flexWrap:"wrap"},children:[e.jsx(i,{plain:!0,icon:l,onClick:n,children:"Accueil"}),e.jsx(s,{variant:"bodySm",color:"subdued",children:"‚Üí"}),e.jsx(s,{variant:"bodySm",fontWeight:"medium",children:t.title}),e.jsx(s,{variant:"bodySm",color:"subdued",children:"‚Üí"}),e.jsx(s,{variant:"bodySm",children:r.title})]}),e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"flex-start",marginBottom:"1rem",gap:"1rem",flexWrap:"wrap"},children:[e.jsxs("div",{style:{flex:1,minWidth:"300px"},children:[e.jsxs("div",{style:{display:"flex",alignItems:"center",gap:"0.75rem",marginBottom:"0.5rem"},children:[e.jsx("span",{style:{fontSize:"1.5rem"},children:t.icon}),e.jsx(s,{variant:"headingLg",children:r.title})]}),e.jsx(s,{variant:"bodyMd",color:"subdued",children:r.description||"Apprenez les concepts essentiels √©tape par √©tape"})]}),e.jsxs("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap"},children:[e.jsxs(d,{status:"info",children:["Le√ßon ",c+1,"/",t.lessons.length]}),e.jsx(d,{children:r.duration}),e.jsx(d,{status:"theory"===r.type?"neutral":"warning",children:"theory"===r.type?"Th√©orie":"Pratique"}),T&&e.jsxs(d,{status:"success",children:[e.jsx(u,{})," Termin√©"]})]})]}),e.jsx("div",{style:{background:"#f3f3f3",borderRadius:"8px",height:"6px",overflow:"hidden",marginBottom:"0.5rem"},children:e.jsx("div",{style:{height:"100%",background:"linear-gradient(90deg, #00a96e, #00b894)",borderRadius:"8px",width:`${x(a)}%`,transition:"width 0.3s ease"}})}),e.jsxs(s,{variant:"bodySm",color:"subdued",children:["Progression du module : ",Math.round(x(a)),"%"]})]})}),w=e.jsx(o,{children:e.jsx("div",{style:{padding:"1rem"},children:e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",gap:"1rem"},children:[e.jsx(i,{icon:m,disabled:!j,onClick:v,children:"Pr√©c√©dent"}),T?e.jsx(d,{status:"success",children:"Le√ßon termin√©e ‚úì"}):e.jsx(i,{primary:!0,icon:u,onClick:y,children:"Terminer la le√ßon"}),e.jsxs(i,{primary:T,disabled:!C,onClick:f,children:["Suivant",e.jsx(h,{})]})]})})}),R=e.jsx(o,{children:e.jsxs("div",{style:{padding:"1rem"},children:[e.jsx(s,{variant:"headingMd",style:{marginBottom:"1rem"},children:"Le√ßons du module"}),e.jsx("div",{style:{display:"flex",flexDirection:"column",gap:"0.5rem"},children:t.lessons.map((n,t)=>e.jsx("div",{onClick:()=>k(a,t),style:{padding:"0.75rem",borderRadius:"8px",cursor:"pointer",backgroundColor:t===c?"#f0f8ff":"transparent",border:t===c?"2px solid #2c5aa0":"1px solid #e1e5e9",transition:"all 0.2s ease"},children:e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center"},children:[e.jsxs("div",{children:[e.jsxs(s,{variant:"bodySm",fontWeight:t===c?"semibold":"regular",children:[t+1,". ",n.title]}),e.jsx(s,{variant:"caption",color:"subdued",children:n.duration})]}),b(a,t)&&e.jsx(u,{style:{color:"#00a96e"}})]})},t))})]})});return e.jsx(H,{children:e.jsxs("div",{style:{maxWidth:"1200px",margin:"0 auto",padding:"1rem"},children:[e.jsx("div",{className:"slide-in-top",style:{marginBottom:"1.5rem"},children:S}),e.jsxs(p,{children:[e.jsx(z,{on:["desktop","large"],children:e.jsx(p.Section,{variant:"oneThird",children:e.jsx("div",{className:"slide-in-left",style:{position:"sticky",top:"1rem",animationDelay:"0.2s"},children:R})})}),e.jsxs(p.Section,{children:[e.jsx("div",{className:"slide-in-bottom",style:{marginBottom:"1.5rem",animationDelay:"0.1s"},children:e.jsx(F,{lesson:r})}),e.jsx("div",{className:"slide-in-bottom",style:{animationDelay:"0.3s"},children:w})]})]}),e.jsx(z,{on:["mobile","tablet"],children:e.jsx("div",{className:"slide-in-bottom",style:{marginTop:"1.5rem",animationDelay:"0.4s"},children:R})})]})})}function O({onStartCourse:n}){const{getProgressPercentage:t,completedLessons:r,navigateToLesson:a}=A(),c={hidden:{y:20,opacity:0},visible:{y:0,opacity:1,transition:{type:"spring",stiffness:100}}};return e.jsx(g,{title:"Cours Interactif Vite + React",subtitle:"Ma√Ætrisez le d√©veloppement web moderne avec un apprentissage pratique",children:e.jsx(p,{children:e.jsx(p.Section,{children:e.jsxs(motion.div,{variants:{hidden:{opacity:0},visible:{opacity:1,transition:{staggerChildren:.1}}},initial:"hidden",animate:"visible",children:[e.jsx(motion.div,{variants:c,children:e.jsx(o,{children:e.jsx("div",{style:{padding:"1.5rem"},children:e.jsxs("div",{style:{display:"flex",flexDirection:"column",gap:"1.5rem"},children:[e.jsxs("div",{style:{textAlign:"center"},children:[e.jsx(motion.div,{whileHover:{scale:1.1},whileTap:{scale:.95},style:{display:"inline-block",fontSize:"2.5rem",marginBottom:"0.5rem"},children:"‚ö°‚öõÔ∏è"}),e.jsx(s,{variant:"headingXl",as:"h1",children:"Apprendre Vite + React"}),e.jsx(s,{variant:"bodyLg",color:"subdued",children:"Cr√©ez des applications web modernes et rapides avec des le√ßons interactives"})]}),e.jsx(f,{}),e.jsxs("div",{style:{display:"flex",justifyContent:"space-around",flexWrap:"wrap",gap:"1rem"},children:[e.jsxs("div",{style:{textAlign:"center"},children:[e.jsx(d,{status:"info",children:"üìö"}),e.jsxs(s,{variant:"bodyMd",alignment:"center",children:[L.totalModules," Modules"]})]}),e.jsxs("div",{style:{textAlign:"center"},children:[e.jsx(d,{status:"success",children:e.jsx(v,{})}),e.jsxs(s,{variant:"bodyMd",alignment:"center",children:[L.estimatedDuration," minutes"]})]}),e.jsxs("div",{style:{textAlign:"center"},children:[e.jsx(d,{status:"attention",children:"üìö"}),e.jsxs(s,{variant:"bodyMd",alignment:"center",children:[L.totalLessons," Le√ßons"]})]})]}),t()>0&&e.jsxs(motion.div,{initial:{width:0},animate:{width:"100%"},transition:{duration:.5},children:[e.jsx("div",{style:{background:"#f3f3f3",borderRadius:"10px",height:"8px",overflow:"hidden"},children:e.jsx(motion.div,{style:{height:"100%",background:"linear-gradient(90deg, #00a96e, #00b894)",borderRadius:"10px"},initial:{width:0},animate:{width:`${t()}%`},transition:{duration:1,delay:.5}})}),e.jsxs(s,{variant:"bodySm",color:"subdued",alignment:"center",children:["Progression : ",Math.round(t()),"% (",r.size,"/",L.totalLessons," le√ßons)"]})]}),e.jsx("div",{style:{textAlign:"center"},children:e.jsx(motion.div,{whileHover:{scale:1.05},whileTap:{scale:.95},children:e.jsx(i,{primary:!0,size:"large",icon:y,onClick:n,children:t()>0?"Continuer l'apprentissage":"Commencer le cours"})})})]})})})}),e.jsx(motion.div,{variants:c,style:{marginTop:"2rem"},children:e.jsx(s,{variant:"headingMd",as:"h2",children:"Modules du cours"})}),e.jsx(p.Section,{children:e.jsx(N,{children:D.map((t,r)=>e.jsx(motion.div,{variants:c,children:e.jsx(motion.div,{whileHover:{scale:1.02},whileTap:{scale:.98},style:{cursor:"pointer"},onClick:()=>(a(r,0),void n()),children:e.jsx(o,{children:e.jsx("div",{style:{padding:"1rem"},children:e.jsxs("div",{style:{display:"flex",alignItems:"center",justifyContent:"space-between",flexWrap:"wrap",gap:"1rem"},children:[e.jsxs("div",{style:{display:"flex",alignItems:"center",gap:"1rem"},children:[e.jsx(motion.div,{whileHover:{rotate:360},transition:{duration:.5},style:{fontSize:"2rem"},children:t.icon}),e.jsxs("div",{children:[e.jsx(s,{variant:"headingSm",children:t.title}),e.jsx(s,{variant:"bodySm",color:"subdued",children:t.description})]})]}),e.jsxs("div",{style:{display:"flex",gap:"0.5rem",alignItems:"center"},children:[e.jsxs(d,{status:"info",children:[t.lessons.length," le√ßons"]}),e.jsx(d,{children:t.duration}),e.jsx(motion.div,{initial:{opacity:0},whileHover:{opacity:1},style:{marginLeft:"0.5rem"},children:e.jsx(s,{variant:"bodySm",color:"subdued",children:"‚Üí"})})]})]})})})})},t.id))})}),e.jsx(motion.div,{variants:c,style:{marginTop:"3rem"},children:e.jsx(s,{variant:"headingMd",as:"h2",children:"√Ä propos du cours"})}),e.jsx(p.Section,{children:e.jsx(o,{children:e.jsxs("div",{style:{padding:"2rem"},children:[e.jsx(s,{variant:"headingMd",style:{marginBottom:"1rem"},children:"üéØ Pourquoi choisir ce cours ?"}),e.jsx("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"},children:["Apprentissage interactif avec des exemples pratiques","Progression guid√©e √©tape par √©tape","Exercices pratiques et projets r√©els","Support moderne avec les derni√®res technologies","Communaut√© active et support continu"].map((n,t)=>e.jsxs("div",{style:{display:"flex",alignItems:"center",gap:"0.5rem"},children:[e.jsx("span",{style:{color:"#00a96e",fontSize:"1.2rem"},children:"‚úì"}),e.jsx(s,{variant:"bodyMd",children:n})]},t))})]})})}),e.jsx("div",{style:{height:"3rem"}})]})})})})}function W({size:n="medium"}){const t={small:{width:"24px",height:"24px",fontSize:"1rem"},medium:{width:"32px",height:"32px",fontSize:"1.2rem"},large:{width:"48px",height:"48px",fontSize:"1.5rem"}}[n];return e.jsxs("div",{className:"hover-scale clickable",style:{display:"flex",alignItems:"center",gap:"0.5rem",cursor:"pointer"},children:[e.jsx("div",{style:{...t,background:"linear-gradient(135deg, #646cff 0%, #747bff 100%)",borderRadius:"8px",display:"flex",alignItems:"center",justifyContent:"center",color:"white",fontWeight:"bold",fontSize:t.fontSize,boxShadow:"0 2px 8px rgba(0,0,0,0.1)"},children:"‚ö°"}),e.jsxs("div",{style:{display:"flex",flexDirection:"column",lineHeight:1.2},children:[e.jsx("span",{style:{fontWeight:"600",fontSize:"0.875rem",color:"#202223"},children:"Vite + React"}),e.jsx("span",{style:{fontSize:"0.75rem",color:"#6d7175",fontWeight:"400"},children:"Cours Interactif"})]})]})}function V({children:n,currentPage:t,onNavigate:s,showNavigation:o=!0}){const{getProgressPercentage:i,courseModules:a,currentModuleIndex:c}=A(),[d,u]=r.useState(!1),[p,m]=r.useState(!1),[h,g]=r.useState(""),f=[{label:"Accueil",icon:l,onClick:()=>{s("home"),u(!1)},selected:"home"===t},{label:"Cours",icon:x,onClick:()=>{s("course"),u(!1)},selected:"course"===t,badge:i()>0?`${Math.round(i())}%`:void 0}],v=e.jsx("div",{className:"slide-in-top",style:{animationDelay:"0.1s"},children:e.jsx(j,{showNavigationToggle:o,onNavigationToggle:()=>u(!d),logo:{topBarSource:e.jsx(W,{}),contextualSaveBarSource:e.jsx(W,{}),url:"#",accessibilityLabel:"Vite + React Course",onClick:()=>s("home")}})}),y=o?e.jsx("div",{className:"slide-in-left",style:{animationDelay:"0.2s"},children:e.jsxs(b,{location:t,children:[e.jsx(b.Section,{items:f,fill:!0}),i()>0&&e.jsx(b.Section,{title:"Progression",items:[{label:`${Math.round(i())}% compl√©t√©`,icon:()=>e.jsx("div",{style:{width:"20px",height:"20px",borderRadius:"50%",background:`conic-gradient(#00a96e 0deg ${3.6*i()}deg, #e1e5e9 ${3.6*i()}deg 360deg)`,display:"flex",alignItems:"center",justifyContent:"center"},children:e.jsx("div",{style:{width:"12px",height:"12px",backgroundColor:"white",borderRadius:"50%"}})}),disabled:!0}]}),"course"===t&&a.length>0&&e.jsx(b.Section,{title:"Modules",items:a.slice(0,3).map((e,n)=>({label:e.title,icon:()=>e.icon,selected:c===n,disabled:!0}))})]})}):null,T=p&&e.jsx(C,{content:h,onDismiss:()=>m(!1)});return e.jsx("div",{className:"main-layout",children:e.jsxs(k,{topBar:v,navigation:y,showMobileNavigation:d,onNavigationDismiss:()=>u(!1),children:[e.jsx("div",{className:"scrollable fade-in",style:{minHeight:"calc(100vh - 56px)",width:"100%",padding:"0"},children:e.jsx("div",{className:"content-enter",style:{minHeight:"100%"},children:n},t)}),T]})})}function _(){const[n,t]=r.useState("home"),s=e=>{t(e)};return e.jsx(e.Fragment,{children:"home"===n?e.jsx(V,{currentPage:"home",onNavigate:s,showNavigation:!0,children:e.jsx(O,{onStartCourse:()=>{t("course")}})}):e.jsx(V,{currentPage:"course",onNavigate:s,showNavigation:!0,children:e.jsx(q,{onBackToHome:()=>{t("home")}})})})}function Q(){return e.jsx(T,{children:e.jsx(E,{children:e.jsx(_,{})})})}B.createRoot(document.getElementById("root")).render(e.jsx(r.StrictMode,{children:e.jsx(T,{children:e.jsx(Q,{})})}));
